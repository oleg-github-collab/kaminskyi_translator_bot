#!/usr/bin/env python3
"""
–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –º–æ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
"""

import sys
import os

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_full_language_system():
    """–¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω—É —Å–∏—Å—Ç–µ–º—É –º–æ–≤"""
    print("üß™ === –ü–û–í–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò –ú–û–í ===")
    
    try:
        from keyboards.inline import get_language_keyboard
        from config import DEEPL_LANGUAGES, OTRANSLATOR_LANGUAGES, COMMON_LANGUAGES
        
        print("‚úÖ –Ü–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π")
        
        # 1. –¢–ï–°–¢ –ö–Ü–õ–¨–ö–û–°–¢–Ü –ú–û–í
        print(f"\nüìä –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –ú–û–í:")
        print(f"   ‚Ä¢ DeepL (Basic): {len(DEEPL_LANGUAGES)} –º–æ–≤")
        print(f"   ‚Ä¢ O*Translator (Epic): {len(OTRANSLATOR_LANGUAGES)} –º–æ–≤")
        print(f"   ‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∑ –ø—Ä–∞–ø–æ—Ä–∞–º–∏: {len(COMMON_LANGUAGES)} –º–æ–≤")
        
        # 2. –¢–ï–°–¢ –ö–õ–ê–í–Ü–ê–¢–£–†
        print(f"\nüîò –¢–ï–°–¢ –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–ê–í–Ü–ê–¢–£–†:")
        
        # Basic –º–æ–¥–µ–ª—å
        basic_kb = get_language_keyboard("basic", page=0)
        basic_page_2 = get_language_keyboard("basic", page=1)
        basic_page_last = get_language_keyboard("basic", page=10)  # –¢–µ—Å—Ç –≤–µ–ª–∏–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        
        print(f"   Basic —Å—Ç–æ—Ä.1: {len(basic_kb.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        print(f"   Basic —Å—Ç–æ—Ä.2: {len(basic_page_2.inline_keyboard)} —Ä—è–¥–∫—ñ–≤") 
        print(f"   Basic —Å—Ç–æ—Ä.10: {len(basic_page_last.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        
        # Epic –º–æ–¥–µ–ª—å
        epic_kb = get_language_keyboard("epic", page=0)
        epic_page_2 = get_language_keyboard("epic", page=1)
        epic_page_5 = get_language_keyboard("epic", page=5)
        
        print(f"   Epic —Å—Ç–æ—Ä.1: {len(epic_kb.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        print(f"   Epic —Å—Ç–æ—Ä.2: {len(epic_page_2.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        print(f"   Epic —Å—Ç–æ—Ä.6: {len(epic_page_5.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        
        # 3. –¢–ï–°–¢ CALLBACK_DATA
        print(f"\nüîó –¢–ï–°–¢ CALLBACK DATA:")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ callback_data
        def check_keyboard_callbacks(keyboard, model_name):
            lang_buttons = 0
            nav_buttons = 0
            info_buttons = 0
            
            for row in keyboard.inline_keyboard:
                for button in row:
                    if button.callback_data.startswith("lang_"):
                        lang_buttons += 1
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç
                        lang_code = button.callback_data.split("_")[1]
                        if len(lang_code) < 2 or len(lang_code) > 4:
                            print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥ –º–æ–≤–∏: {lang_code}")
                    elif button.callback_data.startswith("lang_page_"):
                        nav_buttons += 1
                    elif button.callback_data == "page_info":
                        info_buttons += 1
            
            print(f"   {model_name}: {lang_buttons} –º–æ–≤, {nav_buttons} –Ω–∞–≤—ñ–≥., {info_buttons} —ñ–Ω—Ñ–æ")
            return lang_buttons > 0
        
        check_keyboard_callbacks(basic_kb, "Basic —Å—Ç–æ—Ä.1")
        check_keyboard_callbacks(epic_kb, "Epic —Å—Ç–æ—Ä.1")
        check_keyboard_callbacks(epic_page_2, "Epic —Å—Ç–æ—Ä.2")
        
        # 4. –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–ò–• –ú–û–í
        print(f"\nüåç –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–ò–• –ú–û–í:")
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –º–æ–≤–∏ –∑ –ø—Ä–∞–ø–æ—Ä–∞–º–∏
        test_languages = ["UK", "EN", "DE", "FR", "ZH", "AR", "JA"]
        
        for lang_code in test_languages:
            in_deepl = lang_code in DEEPL_LANGUAGES
            in_otrans = lang_code in OTRANSLATOR_LANGUAGES
            has_flag = lang_code in COMMON_LANGUAGES
            
            deepl_mark = "‚úÖ" if in_deepl else "‚ùå"
            otrans_mark = "‚úÖ" if in_otrans else "‚ùå"
            flag_mark = "üèÅ" if has_flag else "‚≠ï"
            
            lang_name = COMMON_LANGUAGES.get(lang_code, DEEPL_LANGUAGES.get(lang_code, lang_code))
            print(f"   {lang_code} ({lang_name[:15]:15}): DeepL {deepl_mark} | O*Trans {otrans_mark} | Flag {flag_mark}")
        
        # 5. –¢–ï–°–¢ –ü–ê–ì–Ü–ù–ê–¶–Ü–á
        print(f"\nüìÑ –¢–ï–°–¢ –ü–ê–ì–Ü–ù–ê–¶–Ü–á:")
        
        def calculate_pages(total_langs):
            return (total_langs + 11) // 12  # 12 –º–æ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        
        basic_pages = calculate_pages(len(DEEPL_LANGUAGES))
        epic_pages = calculate_pages(len(OTRANSLATOR_LANGUAGES))
        
        print(f"   Basic: {len(DEEPL_LANGUAGES)} –º–æ–≤ ‚Üí {basic_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        print(f"   Epic: {len(OTRANSLATOR_LANGUAGES)} –º–æ–≤ ‚Üí {epic_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
        last_basic_page = get_language_keyboard("basic", page=basic_pages-1)
        last_epic_page = get_language_keyboard("epic", page=epic_pages-1)
        
        print(f"   –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ Basic: {len(last_basic_page.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        print(f"   –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ Epic: {len(last_epic_page.inline_keyboard)} —Ä—è–¥–∫—ñ–≤")
        
        # 6. –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø
        print(f"\nüé® –î–ï–ú–û –ö–õ–ê–í–Ü–ê–¢–£–†–ò (Basic —Å—Ç–æ—Ä.1):")
        print("‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì")
        
        basic_kb = get_language_keyboard("basic", page=0)
        lang_rows = [row for row in basic_kb.inline_keyboard if not any(
            btn.callback_data.startswith("lang_page_") or btn.callback_data == "page_info" 
            for btn in row
        )]
        
        for row in lang_rows[:6]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 6 —Ä—è–¥–∫—ñ–≤
            if len(row) == 2:
                left = row[0].text[:17]
                right = row[1].text[:17]
                print(f"‚îÉ {left:17} ‚îÉ {right:17} ‚îÉ")
            elif len(row) == 1:
                left = row[0].text[:17]
                print(f"‚îÉ {left:17} ‚îÉ                   ‚îÉ")
        
        print("‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
        nav_found = False
        for row in basic_kb.inline_keyboard:
            if any(btn.callback_data.startswith("lang_page_") for btn in row):
                nav_text = " | ".join([btn.text for btn in row])
                print(f"‚îÉ          {nav_text:19}          ‚îÉ")
                nav_found = True
                break
        
        if not nav_found:
            print("‚îÉ           (–Ω–µ–º–∞—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)           ‚îÉ")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ
        for row in basic_kb.inline_keyboard:
            if any(btn.callback_data == "page_info" for btn in row):
                info_text = row[0].text
                print(f"‚îÉ {info_text:37} ‚îÉ")
                break
        
        print("‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ")
        
        print(f"\n‚úÖ –£–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   ‚Ä¢ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print(f"   ‚Ä¢ –í—Å—ñ –º–æ–≤–∏ –¥–æ–¥–∞–Ω–æ –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
        print(f"   ‚Ä¢ Callback_data –∫–æ—Ä–µ–∫—Ç–Ω—ñ")
        print(f"   ‚Ä¢ –ü—Ä–∞–ø–æ—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è")
        print(f"   ‚Ä¢ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_full_language_system()
    sys.exit(0 if success else 1)