#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ user flow
–ó–∞–ø—É—Å–∫: python3 test_flow.py
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_flow_components():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ flow"""
    
    print("üöÄ === –¢–ï–°–¢–£–í–ê–ù–ù–Ø USER FLOW –°–ò–°–¢–ï–ú–ò ===")
    print(f"‚è∞ –ß–∞—Å —Ç–µ—Å—Ç—É: {datetime.now().isoformat()}")
    print()
    
    # 1. –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤
    print("üì¶ 1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤...")
    try:
        from utils.debug_logger import DebugLogger, debug_logger
        print("‚úÖ debug_logger —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        from utils.flow_manager import FlowManager, flow_manager
        print("‚úÖ flow_manager —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        from handlers.universal import universal_callback_handler
        print("‚úÖ universal_callback_handler —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        from states import TranslationStates
        print("‚úÖ TranslationStates —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        print("‚úÖ –í—Å—ñ –º–æ–¥—É–ª—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}")
        return False
    
    print()
    
    # 2. –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è –ª–æ–≥—ñ–≤
    print("üìÅ 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    try:
        os.makedirs("logs", exist_ok=True)
        os.makedirs("temp", exist_ok=True)
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π: {str(e)}")
        return False
    
    print()
    
    # 3. –¢–µ—Å—Ç debug_logger
    print("üîç 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è debug_logger...")
    try:
        # –¢–µ—Å—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
        debug_logger.debug_logger.info("TEST: Debug logger –ø—Ä–∞—Ü—é—î")
        print("‚úÖ Debug logger —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ debug_logger: {str(e)}")
        return False
    
    print()
    
    # 4. –¢–µ—Å—Ç flow_manager
    print("üîÑ 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è flow_manager...")
    try:
        # –°—Ç–≤–æ—Ä–∏–º–æ mock state –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        class MockState:
            def __init__(self):
                self.data = {}
                self.current_state = None
            
            async def get_state(self):
                return self.current_state
            
            async def get_data(self):
                return self.data
            
            async def update_data(self, **kwargs):
                self.data.update(kwargs)
            
            async def finish(self):
                self.current_state = None
                self.data = {}
            
            async def reset_data(self):
                self.data = {}
        
        mock_state = MockState()
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        progress = await flow_manager.get_user_progress(12345, mock_state)
        print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {progress}")
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        validation = await flow_manager.validate_user_data(12345, mock_state)
        print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö: {validation}")
        
        print("‚úÖ Flow manager —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ flow_manager: {str(e)}")
        return False
    
    print()
    
    # 5. –¢–µ—Å—Ç —Å—Ç–∞–Ω—ñ–≤
    print("üéØ 5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤...")
    try:
        states_list = [
            TranslationStates.choosing_model,
            TranslationStates.waiting_for_source_language,
            TranslationStates.waiting_for_target_language,
            TranslationStates.waiting_for_file,
            TranslationStates.waiting_for_payment_confirmation,
            TranslationStates.translating,
            TranslationStates.completed
        ]
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(states_list)} —Å—Ç–∞–Ω—ñ–≤")
        for i, state in enumerate(states_list, 1):
            print(f"   {i}. {state}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—ñ–≤: {str(e)}")
        return False
    
    print()
    
    # 6. –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("‚öôÔ∏è 6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    try:
        import config
        
        models_count = len(config.MODELS) if hasattr(config, 'MODELS') else 0
        languages_count = len(config.DEEPL_LANGUAGES) if hasattr(config, 'DEEPL_LANGUAGES') else 0
        
        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—ñ: {models_count}")
        print(f"   ‚Ä¢ –ú–æ–≤–∏: {languages_count}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        required_settings = ['BOT_TOKEN', 'STRIPE_SECRET_KEY', 'WEBHOOK_URL']
        for setting in required_settings:
            if hasattr(config, setting):
                value = getattr(config, setting)
                status = "‚úÖ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if value else "‚ö†Ô∏è –ø–æ—Ä–æ–∂–Ω—î"
                print(f"   ‚Ä¢ {setting}: {status}")
            else:
                print(f"   ‚Ä¢ {setting}: ‚ùå –≤—ñ–¥—Å—É—Ç–Ω—î")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {str(e)}")
        return False
    
    print()
    
    # 7. –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    print("üìÇ 7. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...")
    try:
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        test_file = "temp/test_flow.txt"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write("Test content")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
        if os.path.exists(test_file):
            os.remove(test_file)
            print("‚úÖ –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î")
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏: {str(e)}")
        return False
    
    print()
    
    # 8. –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    print("üéâ === –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û ===")
    print()
    print("‚úÖ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
    print("‚úÖ User flow —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print()
    print("üî• –ö–õ–Æ–ß–û–í–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:")
    print("   ‚Ä¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ handler'–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")
    print("   ‚Ä¢ –î–æ–¥–∞–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π fallback handler")
    print("   ‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è") 
    print("   ‚Ä¢ –î–æ–¥–∞–Ω–æ flow manager –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–∞–º–∏")
    print("   ‚Ä¢ –í—Å—ñ callback'–∏ —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    print()
    print("üìã –î–õ–Ø –ó–ê–ü–£–°–ö–£ –ë–û–¢–ê:")
    print("   1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    print("   2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python3 bot.py")
    print("   3. –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ª–æ–≥–∏ —É logs/debug_flow.log")
    print()
    
    return True

async def test_callback_routing():
    """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó callback'—ñ–≤"""
    
    print("üéØ === –¢–ï–°–¢ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–Ü–á CALLBACK'–Ü–í ===")
    
    test_callbacks = [
        "model_basic",
        "model_epic", 
        "lang_UK",
        "lang_EN",
        "process_payment",
        "payment_done",
        "continue_translate",
        "unknown_callback"
    ]
    
    print("üìã –¢–µ—Å—Ç–æ–≤—ñ callback'–∏:")
    for callback in test_callbacks:
        print(f"   ‚Ä¢ {callback}")
    
    print()
    print("üîç –õ–æ–≥—ñ–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó:")
    for callback in test_callbacks:
        if callback.startswith("model_"):
            route = "handle_model_selection"
        elif callback.startswith("lang_"):
            route = "handle_language_selection" 
        elif callback in ["process_payment", "payment_done", "upload_another", "payment_help"]:
            route = "handle_payment_callbacks"
        elif callback in ["continue_translate", "exit"]:
            route = "handle_navigation_callbacks"
        else:
            route = "handle_unknown_callback"
        
        print(f"   {callback} ‚Üí {route}")
    
    print("\n‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è callback'—ñ–≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
    return True

if __name__ == "__main__":
    async def main():
        success = await test_flow_components()
        if success:
            await test_callback_routing()
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
        else:
            print("\n‚ùå –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–ï–í–î–ê–õ–ï - –ü–û–¢–†–Ü–ë–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø")
            sys.exit(1)
    
    asyncio.run(main())