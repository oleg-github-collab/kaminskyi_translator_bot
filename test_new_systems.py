#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–ò–• –°–ò–°–¢–ï–ú
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –º–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤
"""

import sys
import os
import tempfile

print("üöÄ –¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—ñ –ø–æ—Ç—É–∂–Ω—ñ —Å–∏—Å—Ç–µ–º–∏...")

# === –¢–ï–°–¢ 1: –°–ò–°–¢–ï–ú–ê –ú–û–í ===
print("\nüåç –¢–ï–°–¢ 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–≤")
try:
    from utils.language_system import (
        SUPPORTED_LANGUAGES, POPULAR_LANGUAGES,
        get_language_info, get_language_name, validate_language,
        get_popular_languages, get_languages_by_region
    )
    
    print(f"‚úÖ –í—Å—å–æ–≥–æ –º–æ–≤: {len(SUPPORTED_LANGUAGES)}")
    print(f"üî• –ü–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º–æ–≤: {len(POPULAR_LANGUAGES)}")
    
    # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    uk_info = get_language_info('UK')
    print(f"üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞: {uk_info}")
    
    # –¢–µ—Å—Ç –Ω–∞–∑–≤
    print(f"üìù –ù–∞–∑–≤–∞ UK: {get_language_name('UK')}")
    print(f"üìù –ù–∞–∑–≤–∞ ZH: {get_language_name('ZH')}")
    
    # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    print(f"‚úÖ UK –≤–∞–ª—ñ–¥–Ω–∞: {validate_language('UK')}")
    print(f"‚ùå XX –≤–∞–ª—ñ–¥–Ω–∞: {validate_language('XX')}")
    
    # –¢–µ—Å—Ç —Ä–µ–≥—ñ–æ–Ω—ñ–≤
    european_langs = get_languages_by_region('European')
    print(f"üá™üá∫ –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏—Ö –º–æ–≤: {len(european_langs)}")
    
    print("‚úÖ –¢–ï–°–¢ 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–≤ - –ü–†–û–ô–î–ï–ù–û")

except Exception as e:
    print(f"‚ùå –¢–ï–°–¢ 1: –ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –º–æ–≤: {e}")

# === –¢–ï–°–¢ 2: –°–ò–°–¢–ï–ú–ê –í–ê–õ–Ü–î–ê–¶–Ü–á –§–ê–ô–õ–Ü–í ===
print("\nüìÅ –¢–ï–°–¢ 2: –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤")
try:
    from utils.file_validation import (
        comprehensive_file_validation, create_validation_report, 
        get_supported_formats_text, SUPPORTED_EXTENSIONS
    )
    
    print(f"‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: {list(SUPPORTED_EXTENSIONS.keys())}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
        f.write("This is a test file for validation.\n–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.\n" * 100)  # ~6000 —Å–∏–º–≤–æ–ª—ñ–≤
        test_file_path = f.name
    
    print(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: {test_file_path}")
    
    # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    result = comprehensive_file_validation(test_file_path, "test.txt")
    print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞: {result.is_valid}")
    print(f"üî§ –°–∏–º–≤–æ–ª—ñ–≤: {result.char_count}")
    print(f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {result.estimated_cost}‚Ç¨")
    print(f"‚è±Ô∏è –ß–∞—Å: {result.processing_time_estimate}—Å")
    
    # –¢–µ—Å—Ç –∑–≤—ñ—Ç—É
    report = create_validation_report(result)
    print("üìã –ó–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:")
    print(report[:200] + "...")
    
    # –û—á–∏—â–µ–Ω–Ω—è
    os.unlink(test_file_path)
    
    print("‚úÖ –¢–ï–°–¢ 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ - –ü–†–û–ô–î–ï–ù–û")

except Exception as e:
    print(f"‚ùå –¢–ï–°–¢ 2: –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤: {e}")
    import traceback
    traceback.print_exc()

# === –¢–ï–°–¢ 3: –ü–†–û–°–¢–ò–ô DEBUG ===
print("\nüîß –¢–ï–°–¢ 3: –ü—Ä–æ—Å—Ç–∏–π debug")
try:
    from utils.simple_debug import (
        log_action, log_state_transition, log_user_flow, debug_callback
    )
    
    # –¢–µ—Å—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_action("test_action", 12345, "testing new systems")
    log_state_transition(12345, "old_state", "new_state", "test")
    log_user_flow(12345, "testing_step", {"system": "new"})
    
    # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    @debug_callback
    async def test_func():
        return "success"
    
    print("‚úÖ –¢–ï–°–¢ 3: –ü—Ä–æ—Å—Ç–∏–π debug - –ü–†–û–ô–î–ï–ù–û")

except Exception as e:
    print(f"‚ùå –¢–ï–°–¢ 3: –ü–æ–º–∏–ª–∫–∞ debug —Å–∏—Å—Ç–µ–º–∏: {e}")

# === –¢–ï–°–¢ 4: –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú ===
print("\nüîó –¢–ï–°–¢ 4: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º")
try:
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ç–µ—Å—Ç
    from utils.language_system import get_language_name, validate_language
    from utils.file_validation import PRICING
    
    # –°–∏–º—É–ª—è—Ü—ñ—è user flow
    source_lang = "UK"
    target_lang = "EN"
    model = "basic"
    
    if validate_language(source_lang) and validate_language(target_lang):
        source_name = get_language_name(source_lang)
        target_name = get_language_name(target_lang)
        price_per_char = PRICING[model]
        
        print(f"üî§ –ü–µ—Ä–µ–∫–ª–∞–¥: {source_name} ‚Üí {target_name}")
        print(f"üí∞ –¶—ñ–Ω–∞ –∑–∞ —Å–∏–º–≤–æ–ª: {price_per_char}‚Ç¨")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª—É –∑ 1000 —Å–∏–º–≤–æ–ª—ñ–≤
        test_chars = 1000
        cost = test_chars * price_per_char
        print(f"üìä –¢–µ—Å—Ç —Ñ–∞–π–ª 1000 —Å–∏–º–≤–æ–ª—ñ–≤ = {cost}‚Ç¨")
        
        print("‚úÖ –¢–ï–°–¢ 4: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è - –ü–†–û–ô–î–ï–ù–û")
    else:
        print("‚ùå –¢–ï–°–¢ 4: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –º–æ–≤–∏")

except Exception as e:
    print(f"‚ùå –¢–ï–°–¢ 4: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")

# === –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===
print("\n" + "="*50)
print("üéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–≤: 130+ –º–æ–≤ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")
print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤: –£–ª—å—Ç—Ä–∞–ø–æ—Ç—É–∂–Ω–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –∑–≤—ñ—Ç–∞–º–∏")
print("‚úÖ Debug —Å–∏—Å—Ç–µ–º–∞: –ü—Ä–æ—Å—Ç–∞ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∞")
print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º")
print("\nüöÄ –í–°–Ü –°–ò–°–¢–ï–ú–ò –ì–û–¢–û–í–Ü –î–û –†–û–ë–û–¢–ò!")
print("="*50)