import logging
import traceback
from functools import wraps
from typing import Callable, Any
from aiogram import types
from aiogram.dispatcher import FSMContext

logger = logging.getLogger(__name__)

def payment_error_handler(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö"""
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏
            error_details = {
                'function': func.__name__,
                'args': str(args)[:200],
                'error': str(e),
                'traceback': traceback.format_exc()
            }
            logger.error(f"Payment error in {func.__name__}: {error_details}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ callback —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            callback = None
            for arg in args:
                if isinstance(arg, types.CallbackQuery):
                    callback = arg
                    break
            
            if callback:
                try:
                    await callback.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞")
                    await callback.message.answer(
                        "‚ùå <b>–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞</b>\n\n"
                        "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É. "
                        "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n\n"
                        f"üÜî <b>ID –ø–æ–º–∏–ª–∫–∏:</b> <code>{func.__name__}_{hash(str(e)) % 10000}</code>",
                        parse_mode="HTML"
                    )
                except Exception as notify_error:
                    logger.error(f"Failed to notify user about error: {notify_error}")
            
            # –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
            return None
    return wrapper

def log_payment_action(action: str, user_id: int, details: dict = None):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –¥—ñ–π"""
    log_entry = {
        'action': action,
        'user_id': user_id,
        'timestamp': __import__('time').time(),
        'details': details or {}
    }
    logger.info(f"Payment action: {log_entry}")

def validate_payment_data(data: dict) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    required_fields = ['char_count', 'model', 'amount']
    
    for field in required_fields:
        if field not in data:
            logger.warning(f"Missing required payment field: {field}")
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
    if not isinstance(data['char_count'], (int, float)) or data['char_count'] <= 0:
        logger.warning(f"Invalid char_count: {data['char_count']}")
        return False
    
    if data['model'] not in ['basic', 'epic']:
        logger.warning(f"Invalid model: {data['model']}")
        return False
    
    if not isinstance(data['amount'], (int, float)) or data['amount'] <= 0:
        logger.warning(f"Invalid amount: {data['amount']}")
        return False
    
    return True

def sanitize_user_input(text: str) -> str:
    """–û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –≤–≤–æ–¥—É"""
    if not isinstance(text, str):
        return ""
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    dangerous_chars = ['<', '>', '"', "'", '&', '\n', '\r', '\t']
    for char in dangerous_chars:
        text = text.replace(char, '')
    
    # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    return text[:1000]

async def safe_state_update(state: FSMContext, **data):
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    try:
        await state.update_data(**data)
        logger.debug(f"State updated with keys: {list(data.keys())}")
    except Exception as e:
        logger.error(f"Failed to update state: {str(e)}")
        raise

class PaymentValidator:
    """–ö–ª–∞—Å –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    
    @staticmethod
    def validate_amount(amount: float, min_amount: float = 0.01, max_amount: float = 1000.0) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏ –ø–ª–∞—Ç–µ–∂—É"""
        return min_amount <= amount <= max_amount
    
    @staticmethod
    def validate_currency(currency: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∞–ª—é—Ç–∏"""
        allowed_currencies = ['EUR', 'USD', 'UAH']
        return currency.upper() in allowed_currencies
    
    @staticmethod
    def validate_user_id(user_id: int) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return isinstance(user_id, int) and user_id > 0
    
    @staticmethod
    def validate_session_data(session_data: dict) -> tuple[bool, str]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó"""
        if not isinstance(session_data, dict):
            return False, "Session data must be a dictionary"
        
        required_fields = ['user_id', 'amount', 'currency', 'char_count', 'model']
        for field in required_fields:
            if field not in session_data:
                return False, f"Missing required field: {field}"
        
        if not PaymentValidator.validate_user_id(session_data['user_id']):
            return False, "Invalid user ID"
        
        if not PaymentValidator.validate_amount(session_data['amount']):
            return False, "Invalid amount"
        
        if not PaymentValidator.validate_currency(session_data['currency']):
            return False, "Invalid currency"
        
        return True, "Valid"

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –≤—Å—å–æ–≥–æ –º–æ–¥—É–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤
def setup_payment_error_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    payment_logger = logging.getLogger('payment')
    payment_logger.setLevel(logging.DEBUG)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥—ñ–≤ –ø–ª–∞—Ç–µ–∂—ñ–≤
    handler = logging.FileHandler('logs/payment.log')
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )
    handler.setFormatter(formatter)
    payment_logger.addHandler(handler)
    
    return payment_logger