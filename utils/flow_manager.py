import logging
from typing import Optional, Dict, Any
from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
try:
    from utils.debug_logger import debug_logger, log_state_change
except ImportError:
    debug_logger = None
    async def log_state_change(*args, **kwargs):
        print(f"DEBUG: State change fallback: {args}")

logger = logging.getLogger(__name__)

class FlowManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è user flow"""
    
    def __init__(self):
        self.current_users = {}  # –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    async def safe_state_transition(self, user_id: int, state: FSMContext, 
                                  target_state: str, trigger: str = "system") -> bool:
        """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
        try:
            old_state = await state.get_state()
            
            if target_state == "choosing_model":
                await TranslationStates.choosing_model.set()
            elif target_state == "waiting_for_source_language":
                await TranslationStates.waiting_for_source_language.set()
            elif target_state == "waiting_for_target_language":
                await TranslationStates.waiting_for_target_language.set()
            elif target_state == "waiting_for_file":
                await TranslationStates.waiting_for_file.set()
            elif target_state == "waiting_for_payment_confirmation":
                await TranslationStates.waiting_for_payment_confirmation.set()
            elif target_state == "translating":
                await TranslationStates.translating.set()
            elif target_state == "completed":
                await TranslationStates.completed.set()
            else:
                logger.error(f"Unknown target state: {target_state}")
                return False
            
            new_state = await state.get_state()
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
            await log_state_change(user_id, state, old_state or "none", new_state, trigger)
            logger.info(f"‚úÖ State transition: {old_state} ‚Üí {new_state} for user {user_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå State transition failed for user {user_id}: {str(e)}")
            return False
    
    async def get_user_progress(self, user_id: int, state: FSMContext) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            current_state = await state.get_state()
            user_data = await state.get_data()
            
            progress = {
                'user_id': user_id,
                'current_state': current_state,
                'step': self._get_step_number(current_state),
                'completed_steps': [],
                'data': user_data
            }
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∫—Ä–æ–∫–∏
            if user_data.get('model'):
                progress['completed_steps'].append('model_selected')
            if user_data.get('source_language'):
                progress['completed_steps'].append('source_language_selected')
            if user_data.get('target_language'):
                progress['completed_steps'].append('target_language_selected')
            if user_data.get('file_path'):
                progress['completed_steps'].append('file_uploaded')
            if user_data.get('payment_completed'):
                progress['completed_steps'].append('payment_completed')
            
            return progress
            
        except Exception as e:
            logger.error(f"‚ùå Error getting user progress for {user_id}: {str(e)}")
            return {'user_id': user_id, 'error': str(e)}
    
    def _get_step_number(self, state_name: str) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫—Ä–æ–∫—É –∑–∞ —Å—Ç–∞–Ω–æ–º"""
        state_steps = {
            'TranslationStates:choosing_model': 1,
            'TranslationStates:waiting_for_source_language': 2,
            'TranslationStates:waiting_for_target_language': 3,
            'TranslationStates:waiting_for_file': 4,
            'TranslationStates:waiting_for_payment_confirmation': 5,
            'TranslationStates:translating': 6,
            'TranslationStates:completed': 7
        }
        return state_steps.get(state_name, 0)
    
    async def validate_user_data(self, user_id: int, state: FSMContext) -> Dict[str, bool]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_data = await state.get_data()
            
            validation = {
                'has_model': bool(user_data.get('model')),
                'has_source_language': bool(user_data.get('source_language')),
                'has_target_language': bool(user_data.get('target_language')),
                'has_file': bool(user_data.get('file_path')),
                'languages_different': user_data.get('source_language') != user_data.get('target_language'),
                'valid_model': user_data.get('model') in ['basic', 'epic'],
                'all_valid': False
            }
            
            validation['all_valid'] = (
                validation['has_model'] and
                validation['has_source_language'] and
                validation['has_target_language'] and
                validation['has_file'] and
                validation['languages_different'] and
                validation['valid_model']
            )
            
            return validation
            
        except Exception as e:
            logger.error(f"‚ùå Validation error for user {user_id}: {str(e)}")
            return {'all_valid': False, 'error': str(e)}
    
    async def reset_user_completely(self, user_id: int, state: FSMContext):
        """–ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            await state.finish()
            await state.reset_data()
            if user_id in self.current_users:
                del self.current_users[user_id]
            logger.info(f"‚úÖ Complete reset for user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå Reset error for user {user_id}: {str(e)}")
    
    async def handle_error_recovery(self, user_id: int, state: FSMContext, error: str):
        """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏"""
        try:
            logger.warning(f"üîÑ Error recovery for user {user_id}: {error}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
            current_state = await state.get_state()
            user_data = await state.get_data()
            
            # –õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
            if not current_state:
                # –Ø–∫—â–æ —Å—Ç–∞–Ω –≤—Ç—Ä–∞—á–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É
                await self.safe_state_transition(user_id, state, "choosing_model", "error_recovery")
                return "restarted"
            
            # –Ø–∫—â–æ —î —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∞–Ω—ñ - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
            if user_data.get('model') and not user_data.get('source_language'):
                await self.safe_state_transition(user_id, state, "waiting_for_source_language", "error_recovery")
                return "restored_to_language_selection"
            
            if user_data.get('target_language') and not user_data.get('file_path'):
                await self.safe_state_transition(user_id, state, "waiting_for_file", "error_recovery")
                return "restored_to_file_upload"
            
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            await self.reset_user_completely(user_id, state)
            await self.safe_state_transition(user_id, state, "choosing_model", "error_recovery_restart")
            return "full_restart"
            
        except Exception as e:
            logger.error(f"‚ùå Recovery failed for user {user_id}: {str(e)}")
            return "recovery_failed"
    
    async def send_progress_message(self, user_id: int, state: FSMContext, 
                                  message_target: types.Message) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º"""
        try:
            progress = await self.get_user_progress(user_id, state)
            
            progress_text = f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å:</b>\n\n"
            progress_text += f"üë§ –ö—Ä–æ–∫ {progress['step']}/7\n"
            progress_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(progress['completed_steps'])}/7\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
            steps_status = {
                'model_selected': '1. ‚öôÔ∏è –ú–æ–¥–µ–ª—å –æ–±—Ä–∞–Ω–∞',
                'source_language_selected': '2. üî§ –ú–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É',
                'target_language_selected': '3. üåê –ú–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É',
                'file_uploaded': '4. üìÑ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ',
                'payment_completed': '5. üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            }
            
            for step_key, step_text in steps_status.items():
                if step_key in progress['completed_steps']:
                    progress_text += f"‚úÖ {step_text}\n"
                else:
                    progress_text += f"‚è≥ {step_text}\n"
            
            await message_target.answer(progress_text, parse_mode="HTML")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Progress message failed for user {user_id}: {str(e)}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
flow_manager = FlowManager()

async def safe_callback_handler(callback: types.CallbackQuery, state: FSMContext, 
                               handler_func, handler_name: str) -> bool:
    """–ë–µ–∑–ø–µ—á–Ω–∏–π wrapper –¥–ª—è callback handler'—ñ–≤"""
    user_id = callback.from_user.id
    
    try:
        # –ë–µ–∑–ø–µ—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É
        try:
            if debug_logger and hasattr(debug_logger, 'log_user_action'):
                await debug_logger.log_user_action(
                    user_id=user_id,
                    action=f"handler_start_{handler_name}",
                    callback_data=callback.data,
                    state=state,
                    callback=callback
                )
        except:
            print(f"DEBUG: handler_start_{handler_name} for user {user_id}")
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è handler'–∞
        result = await handler_func(callback, state)
        
        # –ë–µ–∑–ø–µ—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É
        try:
            if debug_logger and hasattr(debug_logger, 'log_user_action'):
                await debug_logger.log_user_action(
                    user_id=user_id,
                    action=f"handler_success_{handler_name}",
                    callback_data=callback.data,
                    state=state,
                    additional_info={'result': 'success'}
                )
        except:
            print(f"DEBUG: handler_success_{handler_name} for user {user_id}")
        
        return True
        
    except Exception as e:
        # –ë–µ–∑–ø–µ—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        error_msg = str(e)
        try:
            if debug_logger and hasattr(debug_logger, 'log_user_action'):
                await debug_logger.log_user_action(
                    user_id=user_id,
                    action=f"handler_error_{handler_name}",
                    callback_data=callback.data,
                    state=state,
                    additional_info={'error': error_msg}
                )
        except:
            print(f"DEBUG: handler_error_{handler_name} for user {user_id}: {error_msg}")
        
        # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        recovery_result = await flow_manager.handle_error_recovery(user_id, state, error_msg)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await callback.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ...")
        
        if recovery_result == "restarted":
            await callback.message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å. –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:")
        elif recovery_result == "recovery_failed":
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        
        return False

# Utility —Ñ—É–Ω–∫—Ü—ñ—ó
async def ensure_valid_state(user_id: int, state: FSMContext, required_state: str = None) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É"""
    try:
        current_state = await state.get_state()
        
        if required_state and current_state != required_state:
            logger.warning(f"‚ö†Ô∏è State mismatch for user {user_id}: {current_state} != {required_state}")
            return False
        
        if not current_state:
            logger.warning(f"‚ö†Ô∏è No state for user {user_id}")
            await flow_manager.safe_state_transition(user_id, state, "choosing_model", "ensure_valid_state")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå State validation error for user {user_id}: {str(e)}")
        return False