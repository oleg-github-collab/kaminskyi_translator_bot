#!/usr/bin/env python3
"""
üìÅ –£–õ–¨–¢–†–ê–ü–û–¢–£–ñ–ù–ê –°–ò–°–¢–ï–ú–ê –í–ê–õ–Ü–î–ê–¶–Ü–á –§–ê–ô–õ–Ü–í
–í–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤
"""

import os
import logging
import mimetypes
from typing import Dict, Tuple, Optional, List
from dataclasses import dataclass
# import magic  # Optional dependency
import hashlib
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class FileValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—É"""
    is_valid: bool
    file_type: str
    size_bytes: int
    extension: str
    mime_type: str
    encoding: Optional[str] = None
    error_message: Optional[str] = None
    warnings: List[str] = None
    char_count: int = 0
    estimated_cost: float = 0.0
    processing_time_estimate: int = 0  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# üìã –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –§–ê–ô–õ–Ü–í
SUPPORTED_EXTENSIONS = {
    '.txt': {
        'mime_types': ['text/plain', 'text/x-python', 'application/octet-stream'],
        'max_size_mb': 50,
        'description': '–¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª',
        'icon': 'üìÑ'
    },
    '.docx': {
        'mime_types': [
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/zip',
            'application/octet-stream'
        ],
        'max_size_mb': 100,
        'description': 'Microsoft Word –¥–æ–∫—É–º–µ–Ω—Ç',
        'icon': 'üìù'
    },
    '.pdf': {
        'mime_types': ['application/pdf', 'application/octet-stream'],
        'max_size_mb': 200,
        'description': 'PDF –¥–æ–∫—É–º–µ–Ω—Ç',
        'icon': 'üìë'
    },
    '.doc': {
        'mime_types': [
            'application/msword', 
            'application/vnd.ms-word',
            'application/octet-stream'
        ],
        'max_size_mb': 100,
        'description': 'Microsoft Word –¥–æ–∫—É–º–µ–Ω—Ç (—Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç)',
        'icon': 'üìù'
    },
    '.rtf': {
        'mime_types': [
            'application/rtf', 
            'text/rtf',
            'application/octet-stream'
        ],
        'max_size_mb': 50,
        'description': 'Rich Text Format',
        'icon': 'üìÑ'
    },
    '.odt': {
        'mime_types': [
            'application/vnd.oasis.opendocument.text',
            'application/octet-stream'
        ],
        'max_size_mb': 50,
        'description': 'OpenDocument Text',
        'icon': 'üìÑ'
    }
}

# üí∞ –¶–Ü–ù–ò –ó–ê –°–ò–ú–í–û–õ
PRICING = {
    'basic': 0.001,  # 0.001‚Ç¨ –∑–∞ —Å–∏–º–≤–æ–ª
    'epic': 0.0015   # 0.0015‚Ç¨ –∑–∞ —Å–∏–º–≤–æ–ª
}

# üéØ –ë–ï–ó–ü–ï–ß–ù–Ü MIME TYPES
SAFE_MIME_TYPES = set()
for ext_info in SUPPORTED_EXTENSIONS.values():
    SAFE_MIME_TYPES.update(ext_info['mime_types'])

def get_file_hash(file_path: str) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ö–µ—à —Ñ–∞–π–ª—É –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    try:
        hasher = hashlib.md5()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hasher.update(chunk)
        return hasher.hexdigest()
    except Exception as e:
        logger.error(f"Error computing file hash: {e}")
        return "unknown"

def detect_file_encoding(file_path: str) -> Optional[str]:
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É"""
    try:
        import chardet
        
        with open(file_path, 'rb') as f:
            raw_data = f.read(10000)  # –ß–∏—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 10KB
            result = chardet.detect(raw_data)
            return result.get('encoding', 'utf-8') if result else 'utf-8'
    except Exception:
        # Fallback: —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–¥—É–≤–∞–Ω–Ω—è
        encodings_to_try = ['utf-8', 'windows-1251', 'cp1251', 'latin1']
        
        for encoding in encodings_to_try:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    f.read(100)  # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ç—Ä–æ—Ö–∏
                return encoding
            except Exception:
                continue
        
        return 'utf-8'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

def _simple_file_validation(file_path: str, extension: str) -> Tuple[bool, str, int]:
    """–ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    try:
        if extension == '.txt':
            # –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è txt —Ñ–∞–π–ª—ñ–≤
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    char_count = len(content)
                    
                    if char_count == 0:
                        return False, "–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π", 0
                    if char_count < 10:
                        return False, f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π ({char_count} —Å–∏–º–≤–æ–ª—ñ–≤)", char_count
                    if char_count > 1_000_000:
                        return False, f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({char_count:,} —Å–∏–º–≤–æ–ª—ñ–≤)", char_count
                    
                    return True, "OK", char_count
            except UnicodeDecodeError:
                try:
                    with open(file_path, 'r', encoding='windows-1251') as f:
                        content = f.read()
                        char_count = len(content)
                        if char_count >= 10:
                            return True, "OK", char_count
                        else:
                            return False, f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π ({char_count} —Å–∏–º–≤–æ–ª—ñ–≤)", char_count
                except:
                    return False, "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ —Ñ–∞–π–ª", 0
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
            file_size = os.path.getsize(file_path)
            estimated_chars = file_size // 2  # –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
            return True, "OK", max(100, estimated_chars)  # –ú—ñ–Ω—ñ–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤
            
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: {str(e)}", 0

def get_file_mime_type(file_path: str) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ MIME —Ç–∏–ø —Ñ–∞–π–ª—É"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ python-magic —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        try:
            import magic
            file_mime = magic.from_file(file_path, mime=True)
            if file_mime:
                logger.debug(f"Magic MIME type for {file_path}: {file_mime}")
                return file_mime
        except (ImportError, Exception) as e:
            logger.debug(f"Magic not available or failed: {e}")
        
        # Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mimetypes
        mime_type, _ = mimetypes.guess_type(file_path)
        if mime_type:
            logger.debug(f"Mimetypes MIME type for {file_path}: {mime_type}")
            return mime_type
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        ext = os.path.splitext(file_path)[1].lower()
        if ext == '.docx':
            return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        elif ext == '.pdf':
            return 'application/pdf'
        elif ext == '.txt':
            return 'text/plain'
        elif ext == '.doc':
            return 'application/msword'
        elif ext == '.rtf':
            return 'application/rtf'
        elif ext == '.odt':
            return 'application/vnd.oasis.opendocument.text'
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
        return 'application/octet-stream'
        
    except Exception as e:
        logger.error(f"Error detecting MIME type for {file_path}: {e}")
        return 'application/octet-stream'

def validate_file_content(file_path: str, extension: str) -> Tuple[bool, str, int]:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤"""
    try:
        # –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
        try:
            from utils.file_utils import count_chars_in_file, read_file_content
        except ImportError:
            # Fallback: –ø—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è txt —Ñ–∞–π–ª—ñ–≤
            return _simple_file_validation(file_path, extension)
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
        char_count = count_chars_in_file(file_path)
        
        if char_count == 0:
            return False, "–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤–º—ñ—Å—Ç", 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ (1M —Å–∏–º–≤–æ–ª—ñ–≤)
        MAX_CHARS = 1_000_000
        if char_count > MAX_CHARS:
            return False, f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({char_count:,} —Å–∏–º–≤–æ–ª—ñ–≤). –ú–∞–∫—Å–∏–º—É–º: {MAX_CHARS:,}", char_count
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
        MIN_CHARS = 10
        if char_count < MIN_CHARS:
            return False, f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π ({char_count} —Å–∏–º–≤–æ–ª—ñ–≤). –ú—ñ–Ω—ñ–º—É–º: {MIN_CHARS}", char_count
        
        # –°–ø—Ä–æ–±–∞ —á–∏—Ç–∞–Ω–Ω—è –∑–º—ñ—Å—Ç—É –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        content = read_file_content(file_path)
        if not content or not content.strip():
            return False, "–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É", char_count
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –≤–º—ñ—Å—Ç (–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤)
        if extension in ['.txt', '.rtf']:
            printable_chars = sum(1 for c in content if c.isprintable() or c.isspace())
            if printable_chars < len(content) * 0.8:  # –ú–µ–Ω—à–µ 80% —á–∏—Ç–∞–±–µ–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                return False, "–§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤", char_count
        
        logger.info(f"File content validation successful: {char_count:,} chars")
        return True, "OK", char_count
        
    except Exception as e:
        logger.error(f"Error validating file content {file_path}: {e}")
        return False, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}", 0

def calculate_processing_estimates(char_count: int, model: str = 'basic') -> Tuple[float, int]:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏"""
    try:
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        price_per_char = PRICING.get(model, PRICING['basic'])
        cost = char_count * price_per_char
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É (–ø—Ä–∏–±–ª–∏–∑–Ω–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è basic, 80 –¥–ª—è epic)
        chars_per_second = 100 if model == 'basic' else 80
        processing_time = max(30, char_count // chars_per_second)  # –ú—ñ–Ω—ñ–º—É–º 30 —Å–µ–∫—É–Ω–¥
        
        return round(cost, 2), processing_time
        
    except Exception as e:
        logger.error(f"Error calculating estimates: {e}")
        return 0.0, 60  # Fallback –∑–Ω–∞—á–µ–Ω–Ω—è

def comprehensive_file_validation(file_path: str, original_filename: str = None) -> FileValidationResult:
    """
    üõ°Ô∏è –£–õ–¨–¢–†–ê–ü–û–¢–£–ñ–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø –§–ê–ô–õ–£
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –í–°–ï –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏
    """
    warnings = []
    
    try:
        logger.info(f"üîç Starting comprehensive validation for: {file_path}")
        
        # 1. –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–°–ù–£–í–ê–ù–ù–Ø –§–ê–ô–õ–£
        if not file_path or not os.path.exists(file_path):
            return FileValidationResult(
                is_valid=False,
                file_type="unknown",
                size_bytes=0,
                extension="",
                mime_type="",
                error_message="–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —à–ª—è—Ö –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π"
            )
        
        # 2. –ü–ï–†–ï–í–Ü–†–ö–ê –†–û–ó–ú–Ü–†–£
        try:
            size_bytes = os.path.getsize(file_path)
            logger.info(f"üìä File size: {size_bytes:,} bytes ({size_bytes/1024/1024:.2f} MB)")
        except Exception as e:
            return FileValidationResult(
                is_valid=False,
                file_type="unknown",
                size_bytes=0,
                extension="",
                mime_type="",
                error_message=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {e}"
            )
        
        if size_bytes == 0:
            return FileValidationResult(
                is_valid=False,
                file_type="unknown",
                size_bytes=0,
                extension="",
                mime_type="",
                error_message="–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π (0 –±–∞–π—Ç)"
            )
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä 500MB
        MAX_SIZE_BYTES = 500 * 1024 * 1024
        if size_bytes > MAX_SIZE_BYTES:
            return FileValidationResult(
                is_valid=False,
                file_type="unknown",
                size_bytes=size_bytes,
                extension="",
                mime_type="",
                error_message=f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({size_bytes/1024/1024:.1f} MB). –ú–∞–∫—Å–∏–º—É–º: {MAX_SIZE_BYTES/1024/1024} MB"
            )
        
        # 3. –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –†–û–ó–®–ò–†–ï–ù–ù–Ø
        if original_filename:
            extension = os.path.splitext(original_filename)[1].lower()
        else:
            extension = os.path.splitext(file_path)[1].lower()
        
        logger.info(f"üìÑ File extension: {extension}")
        
        if not extension:
            return FileValidationResult(
                is_valid=False,
                file_type="unknown",
                size_bytes=size_bytes,
                extension="",
                mime_type="",
                error_message="–§–∞–π–ª –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è"
            )
        
        # 4. –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–¢–†–ò–ú–£–í–ê–ù–û–ì–û –§–û–†–ú–ê–¢–£
        if extension not in SUPPORTED_EXTENSIONS:
            supported_list = ", ".join(SUPPORTED_EXTENSIONS.keys())
            return FileValidationResult(
                is_valid=False,
                file_type=extension,
                size_bytes=size_bytes,
                extension=extension,
                mime_type="",
                error_message=f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç {extension}. –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: {supported_list}"
            )
        
        ext_info = SUPPORTED_EXTENSIONS[extension]
        
        # 5. –ü–ï–†–ï–í–Ü–†–ö–ê –†–û–ó–ú–Ü–†–£ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¢–ò–ü–£
        max_size_bytes = ext_info['max_size_mb'] * 1024 * 1024
        if size_bytes > max_size_bytes:
            return FileValidationResult(
                is_valid=False,
                file_type=extension,
                size_bytes=size_bytes,
                extension=extension,
                mime_type="",
                error_message=f"–§–∞–π–ª {extension} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({size_bytes/1024/1024:.1f} MB). –ú–∞–∫—Å–∏–º—É–º –¥–ª—è {extension}: {ext_info['max_size_mb']} MB"
            )
        
        # 6. –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø MIME TYPE
        mime_type = get_file_mime_type(file_path)
        logger.info(f"üîç Detected MIME type: {mime_type}")
        
        # 7. –ü–ï–†–ï–í–Ü–†–ö–ê MIME TYPE
        if mime_type not in ext_info['mime_types']:
            warning_msg = f"MIME —Ç–∏–ø {mime_type} –Ω–µ —Ç–∏–ø–æ–≤–∏–π –¥–ª—è {extension}"
            warnings.append(warning_msg)
            logger.warning(warning_msg)
            
            # –Ø–∫—â–æ MIME —Ç–∏–ø –∑–æ–≤—Å—ñ–º –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π
            if mime_type not in SAFE_MIME_TYPES:
                return FileValidationResult(
                    is_valid=False,
                    file_type=extension,
                    size_bytes=size_bytes,
                    extension=extension,
                    mime_type=mime_type,
                    error_message=f"–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π MIME —Ç–∏–ø: {mime_type}"
                )
        
        # 8. –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ö–û–î–£–í–ê–ù–ù–Ø –î–õ–Ø –¢–ï–ö–°–¢–û–í–ò–• –§–ê–ô–õ–Ü–í
        encoding = None
        if extension in ['.txt', '.rtf']:
            encoding = detect_file_encoding(file_path)
            logger.info(f"üìù Detected encoding: {encoding}")
        
        # 9. –í–ê–õ–Ü–î–ê–¶–Ü–Ø –í–ú–Ü–°–¢–£ –¢–ê –ü–Ü–î–†–ê–•–£–ù–û–ö –°–ò–ú–í–û–õ–Ü–í
        content_valid, content_error, char_count = validate_file_content(file_path, extension)
        if not content_valid:
            return FileValidationResult(
                is_valid=False,
                file_type=extension,
                size_bytes=size_bytes,
                extension=extension,
                mime_type=mime_type,
                encoding=encoding,
                error_message=content_error,
                char_count=char_count
            )
        
        # 10. –†–û–ó–†–ê–•–£–ù–û–ö –í–ê–†–¢–û–°–¢–Ü –¢–ê –ß–ê–°–£
        estimated_cost, processing_time = calculate_processing_estimates(char_count)
        
        # 11. –î–û–î–ê–¢–ö–û–í–Ü –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø
        if char_count > 500_000:
            warnings.append(f"–í–µ–ª–∏–∫–∏–π —Ñ–∞–π–ª ({char_count:,} —Å–∏–º–≤–æ–ª—ñ–≤) - –æ–±—Ä–æ–±–∫–∞ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ {processing_time//60} —Ö–≤")
        
        if size_bytes > 10 * 1024 * 1024:  # –ë—ñ–ª—å—à–µ 10MB
            warnings.append(f"–í–µ–ª–∏–∫–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É ({size_bytes/1024/1024:.1f} MB)")
        
        # 12. –£–°–ü–Ü–®–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        logger.info(f"‚úÖ File validation successful: {char_count:,} chars, {estimated_cost}‚Ç¨")
        
        return FileValidationResult(
            is_valid=True,
            file_type=ext_info['description'],
            size_bytes=size_bytes,
            extension=extension,
            mime_type=mime_type,
            encoding=encoding,
            warnings=warnings if warnings else None,
            char_count=char_count,
            estimated_cost=estimated_cost,
            processing_time_estimate=processing_time
        )
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in file validation: {e}", exc_info=True)
        return FileValidationResult(
            is_valid=False,
            file_type="unknown",
            size_bytes=0,
            extension="",
            mime_type="",
            error_message=f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {str(e)}"
        )

def get_supported_formats_text() -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
    formats = []
    for ext, info in SUPPORTED_EXTENSIONS.items():
        formats.append(f"{info['icon']} {ext.upper()} - {info['description']} (–¥–æ {info['max_size_mb']} MB)")
    
    return "üìã **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:**\n\n" + "\n".join(formats)

def create_validation_report(result: FileValidationResult) -> str:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é"""
    if not result.is_valid:
        return f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:**\n{result.error_message}"
    
    report = [
        f"‚úÖ **–§–∞–π–ª –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é**",
        f"üìÑ **–¢–∏–ø:** {result.file_type}",
        f"üìä **–†–æ–∑–º—ñ—Ä:** {result.size_bytes:,} –±–∞–π—Ç ({result.size_bytes/1024/1024:.2f} MB)",
        f"üî§ **–°–∏–º–≤–æ–ª—ñ–≤:** {result.char_count:,}",
        f"üí∞ **–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:** {result.estimated_cost}‚Ç¨",
        f"‚è±Ô∏è **–ß–∞—Å –æ–±—Ä–æ–±–∫–∏:** ~{result.processing_time_estimate//60} —Ö–≤ {result.processing_time_estimate%60} —Å–µ–∫"
    ]
    
    if result.encoding:
        report.append(f"üìù **–ö–æ–¥—É–≤–∞–Ω–Ω—è:** {result.encoding}")
    
    if result.warnings:
        report.append(f"\n‚ö†Ô∏è **–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:**")
        for warning in result.warnings:
            report.append(f"‚Ä¢ {warning}")
    
    return "\n".join(report)

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'FileValidationResult', 'comprehensive_file_validation', 
    'get_supported_formats_text', 'create_validation_report',
    'SUPPORTED_EXTENSIONS', 'PRICING'
]

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤...")
    
    print(f"üìã –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: {list(SUPPORTED_EXTENSIONS.keys())}")
    print(f"üîí –ë–µ–∑–ø–µ—á–Ω—ñ MIME types: {len(SAFE_MIME_TYPES)}")
    print(f"üí∞ –¶—ñ–Ω–∏: {PRICING}")
    
    print("\n" + get_supported_formats_text())
    
    print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∞!")