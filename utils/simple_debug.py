import logging
import os
from datetime import datetime
from functools import wraps

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
os.makedirs('logs', exist_ok=True)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('bot_debug')
logger.setLevel(logging.DEBUG)

# File handler
if not logger.handlers:  # –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    file_handler = logging.FileHandler('logs/bot_debug.log')
    file_formatter = logging.Formatter(
        '%(asctime)s - BOT_DEBUG - %(levelname)s - %(message)s'
    )
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # Console handler
    console_handler = logging.StreamHandler()
    console_formatter = logging.Formatter(
        '%(asctime)s - DEBUG - %(message)s'
    )
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

def log_action(action: str, user_id: int = None, details: str = ""):
    """–ü—Ä–æ—Å—Ç–∏–π –ª–æ–≥–≥–µ—Ä –¥—ñ–π"""
    message = f"[{action}] User: {user_id} | {details}"
    logger.info(message)
    print(f"üîç {message}")  # –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤ –∫–æ–Ω—Å–æ–ª—å

def debug_callback(func):
    """–ü—Ä–æ—Å—Ç–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è callback'—ñ–≤"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        func_name = func.__name__
        user_id = "unknown"
        callback_data = "unknown"
        
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            for arg in args:
                if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                    user_id = arg.from_user.id
                if hasattr(arg, 'data'):
                    callback_data = arg.data
                break
        except:
            pass
        
        try:
            log_action(f"START_{func_name}", user_id, f"data: {callback_data}")
            result = await func(*args, **kwargs)
            log_action(f"SUCCESS_{func_name}", user_id, f"data: {callback_data}")
            return result
        except Exception as e:
            log_action(f"ERROR_{func_name}", user_id, f"data: {callback_data}, error: {str(e)}")
            raise
    
    return wrapper

def log_state_transition(user_id: int, old_state: str, new_state: str, trigger: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏"""
    log_action("STATE_CHANGE", user_id, f"{old_state} ‚Üí {new_state} ({trigger})")

def log_user_flow(user_id: int, step: str, data: dict = None):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—ñ–≤ user flow"""
    details = f"step: {step}"
    if data:
        details += f", data: {data}"
    log_action("USER_FLOW", user_id, details)

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = ['log_action', 'debug_callback', 'log_state_transition', 'log_user_flow', 'logger']