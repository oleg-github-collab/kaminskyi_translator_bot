from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import DEEPL_LANGUAGES, MODELS

def get_model_keyboard(user_lang: str = "en"):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    texts = {
        "uk": {"basic": "‚ö° Kaminskyi Basic", "epic": "üéØ Kaminskyi Epic"},
        "en": {"basic": "‚ö° Kaminskyi Basic", "epic": "üéØ Kaminskyi Epic"},
        "de": {"basic": "‚ö° Kaminskyi Basic", "epic": "üéØ Kaminskyi Epic"},
        "fr": {"basic": "‚ö° Kaminskyi Basic", "epic": "üéØ Kaminskyi Epic"},
        "es": {"basic": "‚ö° Kaminskyi Basic", "epic": "üéØ Kaminskyi Epic"}
    }
    
    lang_texts = texts.get(user_lang, texts["en"])
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text=lang_texts["basic"], callback_data="model_basic"),
        InlineKeyboardButton(text=lang_texts["epic"], callback_data="model_epic")
    )
    return keyboard

def get_language_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    # –°–æ—Ä—Ç—É—î–º–æ –º–æ–≤–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    sorted_languages = sorted(DEEPL_LANGUAGES.items())
    
    # –î–æ–¥–∞—î–º–æ –º–æ–≤–∏ –ø–æ 2 –≤ —Ä—è–¥–æ–∫
    for i in range(0, len(sorted_languages), 2):
        row_buttons = []
        # –ü–µ—Ä—à–∞ –º–æ–≤–∞ –≤ —Ä—è–¥–∫—É
        if i < len(sorted_languages):
            code1, name1 = sorted_languages[i]
            row_buttons.append(InlineKeyboardButton(text=name1, callback_data=f"lang_{code1}"))
        # –î—Ä—É–≥–∞ –º–æ–≤–∞ –≤ —Ä—è–¥–∫—É
        if i + 1 < len(sorted_languages):
            code2, name2 = sorted_languages[i + 1]
            row_buttons.append(InlineKeyboardButton(text=name2, callback_data=f"lang_{code2}"))
        
        if row_buttons:
            keyboard.row(*row_buttons)
    
    return keyboard

def get_continue_keyboard(user_lang: str = "en"):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
    texts = {
        "uk": {"continue": "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", "exit": "–í–∏–π—Ç–∏"},
        "en": {"continue": "Continue translation", "exit": "Exit"},
        "de": {"continue": "√úbersetzung fortsetzen", "exit": "Beenden"},
        "fr": {"continue": "Continuer la traduction", "exit": "Quitter"},
        "es": {"continue": "Continuar traducci√≥n", "exit": "Salir"}
    }
    
    lang_texts = texts.get(user_lang, texts["en"])
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text=lang_texts["continue"], callback_data="continue_translate"),
        InlineKeyboardButton(text=lang_texts["exit"], callback_data="exit")
    )
    return keyboard

def get_payment_keyboard(payment_url: str, user_lang: str = "en"):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç–∏"""
    texts = {
        "uk": {"pay": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", "check": "üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"},
        "en": {"pay": "üí≥ Pay now", "check": "üîÑ Check payment"},
        "de": {"pay": "üí≥ Jetzt bezahlen", "check": "üîÑ Zahlung pr√ºfen"},
        "fr": {"pay": "üí≥ Payer maintenant", "check": "üîÑ V√©rifier le paiement"},
        "es": {"pay": "üí≥ Pagar ahora", "check": "üîÑ Verificar pago"}
    }
    
    lang_texts = texts.get(user_lang, texts["en"])
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton(text=lang_texts["pay"], url=payment_url))
    keyboard.add(InlineKeyboardButton(text=lang_texts["check"], callback_data="check_payment"))
    return keyboard