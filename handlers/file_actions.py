from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from utils.simple_debug import debug_callback, log_action
from utils.file_validation import get_supported_formats_text
import logging

logger = logging.getLogger(__name__)

async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ–ø–ª–∞—Ç–∏
        await TranslationStates.next()  # waiting_for_payment_confirmation -> translating
        
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏...")
        await callback.message.answer("‚ö†Ô∏è –£–≤–∞–≥–∞: –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /translate –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É")
        
        log_action("clicked_payment_button", callback.from_user.id, "user clicked payment")
        
    except Exception as e:
        logger.error(f"Error in process_payment for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

async def upload_another(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ —Ñ–∞–π–ª—É"""
    try:
        await callback.answer()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await TranslationStates.waiting_for_file.set()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–π–ª —è–∫—â–æ –≤—ñ–Ω —î
        user_data = await state.get_data()
        file_path = user_data.get('file_path')
        if file_path:
            import os
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass
        
        await callback.message.answer(
            "üì• **–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:**\n\n" + get_supported_formats_text(),
            parse_mode="Markdown"
        )
        
        log_action("clicked_upload_another", callback.from_user.id, "user wants to upload another file")
        
    except Exception as e:
        logger.error(f"Error in upload_another for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

def register_handlers_file_actions(dp):
    dp.register_callback_query_handler(process_payment, lambda c: c.data == "process_payment")
    dp.register_callback_query_handler(upload_another, lambda c: c.data == "upload_another")