from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

# Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏
def _get_language_name(lang_code):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏ –∑–∞ –∫–æ–¥–æ–º"""
    languages = {
        "UK": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "EN": "English", 
        "DE": "Deutsch",
        "FR": "Fran√ßais",
        "ES": "Espa√±ol",
        "PL": "Polski"
    }
    return languages.get(lang_code, lang_code)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£ - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–∞ —Å—Ç–∞–Ω–æ–º"""
    try:
        logger.info(f"–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("lang_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_target_language
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        selected_lang = _get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {selected_lang}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", parse_mode="HTML")
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_UK"),
            types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_EN")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá©üá™ Deutsch", callback_data="lang_DE"),
            types.InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_FR")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_ES"),
            types.InlineKeyboardButton("üáµüá± Polski", callback_data="lang_PL")
        )
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"–ú–û–í–ê –û–†–ò–ì–Ü–ù–ê–õ–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_source_language: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£ - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–∞ —Å—Ç–∞–Ω–æ–º"""
    try:
        logger.info(f"–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("lang_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language')
        if source_lang and source_lang == language_code:
            await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
            return
        
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_file
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        selected_lang = _get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É: {selected_lang}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)", parse_mode="HTML")
        
        logger.info(f"–ú–û–í–ê –ü–ï–†–ï–ö–õ–ê–î–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_target_language: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í - –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫"""
    # –í–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–∞ —Å—Ç–∞–Ω–æ–º
    dp.register_callback_query_handler(
        choose_source_language, 
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_source_language
    )
    
    # –í–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–∞ —Å—Ç–∞–Ω–æ–º
    dp.register_callback_query_handler(
        choose_target_language, 
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_target_language
    )