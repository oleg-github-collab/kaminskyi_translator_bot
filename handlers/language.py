from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging
from utils.translate_utils import fetch_deepl_languages, fetch_otranslator_languages

logger = logging.getLogger(__name__)

# Languages will be fetched from APIs
LANGUAGE_NAMES = {}
LANGUAGE_NAMES.update(fetch_deepl_languages())
LANGUAGE_NAMES.update(fetch_otranslator_languages())

# Fallback minimal set if APIs fail
if not LANGUAGE_NAMES:
    LANGUAGE_NAMES = {
        "UK": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "EN": "English",
        "DE": "Deutsch",
        "FR": "Fran√ßais",
        "ES": "Espa√±ol",
        "PL": "Polski",
        "RU": "–†—É—Å—Å–∫–∏–π",
        "ZH": "‰∏≠Êñá",
        "JA": "Êó•Êú¨Ë™û",
    }

def get_language_name(code):
    return LANGUAGE_NAMES.get(code, code)


def build_language_keyboard() -> types.InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —É—Å—ñ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º–æ–≤–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    for code, name in LANGUAGE_NAMES.items():
        keyboard.insert(types.InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    return keyboard

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–≤
        keyboard = build_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–í–ê –û–†–ò–ì–Ü–ù–ê–õ–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_source_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language')
        if source_lang and source_lang == language_code:
            await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
            logger.warning(f"‚ö†Ô∏è –û–î–ù–ê–ö–û–í–Ü –ú–û–í–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            return
        
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)", parse_mode="HTML")
        
        logger.info(f"‚úÖ –ú–û–í–ê –ü–ï–†–ï–ö–õ–ê–î–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_target_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í"""
    dp.register_callback_query_handler(
        choose_source_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_source_language,
    )
    dp.register_callback_query_handler(
        choose_target_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_target_language,
    )