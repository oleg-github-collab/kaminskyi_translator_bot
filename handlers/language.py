from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_language_keyboard
from states import TranslationStates
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("lang_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_target_language
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("üåç –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:")
        keyboard = get_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        log_user_action(callback.from_user.id, "selected_source_language", language_code)
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_source_language: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("lang_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_file
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("üì• –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)")
        
        log_user_action(callback.from_user.id, "selected_target_language", language_code)
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_target_language: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í"""
    # –í–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É - –ë–ï–ó –û–ë–ú–ï–ñ–ï–ù–¨
    dp.register_callback_query_handler(choose_source_language)
    
    # –í–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É - –ë–ï–ó –û–ë–ú–ï–ñ–ï–ù–¨
    dp.register_callback_query_handler(choose_target_language)