from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

# Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–∑–≤ –º–æ–≤
LANGUAGE_NAMES = {
    "UK": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "EN": "English",
    "DE": "Deutsch",
    "FR": "Fran√ßais",
    "ES": "Espa√±ol",
    "PL": "Polski",
    "RU": "–†—É—Å—Å–∫–∏–π",
    "ZH": "‰∏≠Êñá",
    "JA": "Êó•Êú¨Ë™û"
}

def get_language_name(code):
    return LANGUAGE_NAMES.get(code, code)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–≤
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            types.InlineKeyboardButton("üá∫üá¶ UKR", callback_data="lang_UK"),
            types.InlineKeyboardButton("üá¨üáß ENG", callback_data="lang_EN"),
            types.InlineKeyboardButton("üá©üá™ GER", callback_data="lang_DE")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá´üá∑ FRA", callback_data="lang_FR"),
            types.InlineKeyboardButton("üá™üá∏ SPA", callback_data="lang_ES"),
            types.InlineKeyboardButton("üáµüá± POL", callback_data="lang_PL")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá∑üá∫ RUS", callback_data="lang_RU"),
            types.InlineKeyboardButton("üá®üá≥ CHN", callback_data="lang_ZH"),
            types.InlineKeyboardButton("üáØüáµ JPN", callback_data="lang_JA")
        )
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–í–ê –û–†–ò–ì–Ü–ù–ê–õ–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_source_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language')
        if source_lang and source_lang == language_code:
            await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
            logger.warning(f"‚ö†Ô∏è –û–î–ù–ê–ö–û–í–Ü –ú–û–í–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            return
        
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)", parse_mode="HTML")
        
        logger.info(f"‚úÖ –ú–û–í–ê –ü–ï–†–ï–ö–õ–ê–î–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_target_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í –ó –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –§–Ü–õ–¨–¢–†–ê–ú–ò"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í LANGUAGE ===")
    
    # Handler –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (—Å—Ç–∞–Ω waiting_for_source_language)
    dp.register_callback_query_handler(
        choose_source_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_source_language
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_source_language")
    
    # Handler –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É (—Å—Ç–∞–Ω waiting_for_target_language)
    dp.register_callback_query_handler(
        choose_target_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_target_language
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_target_language")
    
    logger.info("=== –£–°–Ü HANDLER'–ò LANGUAGE –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")