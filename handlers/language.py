from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_language_keyboard
from states import TranslationStates
from locales.messages import MESSAGES
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£ === User: {callback.from_user.id}, Data: {callback.data}")
        
        # –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–•
        if not callback.data:
            logger.error(f"–ü–£–°–¢–Ü –î–ê–ù–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
            return
            
        if not callback.data.startswith("lang_"):
            logger.error(f"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–Ü –î–ê–ù–Ü: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
        
        await callback.answer()
        logger.info(f"Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        language_code = callback.data.split("_")[1]  # lang_EN, lang_DE —Ç–æ—â–æ
        logger.info(f"–í–∏–±—Ä–∞–Ω–∞ –º–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {language_code} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(source_language=language_code)
        logger.info(f"–ú–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_target_language
        logger.info(f"–°—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        logger.info(f"–ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_lang} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 3/5:</b> –ú–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É"
        keyboard = get_language_keyboard()
        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–≤–∞–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}")
        
        log_user_action(callback.from_user.id, "selected_source_language", language_code)
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£ –£–°–ü–Ü–®–ù–ò–ô === User: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ choose_source_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏", show_alert=True)

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£ === User: {callback.from_user.id}, Data: {callback.data}")
        
        # –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–•
        if not callback.data:
            logger.error(f"–ü–£–°–¢–Ü –î–ê–ù–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
            return
            
        if not callback.data.startswith("lang_"):
            logger.error(f"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–Ü –î–ê–ù–Ü: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
        
        await callback.answer()
        logger.info(f"Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        language_code = callback.data.split("_")[1]  # lang_EN, lang_DE —Ç–æ—â–æ
        logger.info(f"–í–∏–±—Ä–∞–Ω–∞ –º–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {language_code} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(target_language=language_code)
        logger.info(f"–ú–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_file
        logger.info(f"–°—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        logger.info(f"–ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_lang} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª\nüìÑ –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: TXT, DOCX, PDF"
        await callback.message.answer(message_text, parse_mode="HTML")
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ñ–∞–π–ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}")
        
        log_user_action(callback.from_user.id, "selected_target_language", language_code)
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£ –£–°–ü–Ü–®–ù–ò–ô === User: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ choose_target_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏", show_alert=True)

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –í–°–Ü–• HANDLER'–Ü–í –î–õ–Ø –ú–û–í"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í ===")
    
    # –î–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (–ë–ï–ó –°–¢–ê–ù–£ - –¢–ï–ü–ï–† –ü–†–ê–¶–Æ–Ñ)
    dp.register_callback_query_handler(choose_source_language, 
                                     lambda c: c.data and c.data.startswith("lang_"))
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_source_language")
    
    # –î–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É (–ë–ï–ó –°–¢–ê–ù–£ - –¢–ï–ü–ï–† –ü–†–ê–¶–Æ–Ñ)
    dp.register_callback_query_handler(choose_target_language, 
                                     lambda c: c.data and c.data.startswith("lang_"))
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_target_language")
    
    logger.info("=== –£–°–Ü HANDLER'–ò –ú–û–í –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")