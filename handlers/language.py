from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç –º–æ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import COMMON_LANGUAGES, DEEPL_LANGUAGES, OTRANSLATOR_LANGUAGES

def get_language_name(code):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –º–æ–≤–∏ –∑–∞ –∫–æ–¥–æ–º"""
    return COMMON_LANGUAGES.get(code, DEEPL_LANGUAGES.get(code, OTRANSLATOR_LANGUAGES.get(code, code)))

def get_supported_languages(model="basic"):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ"""
    if model == "basic":
        return DEEPL_LANGUAGES
    elif model == "epic":
        return OTRANSLATOR_LANGUAGES
    else:
        return COMMON_LANGUAGES


async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –º–æ–≤–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ
        user_data = await state.get_data()
        model = user_data.get('model', 'basic')
        
        supported_languages = get_supported_languages(model)
        if language_code not in supported_languages:
            await callback.message.answer(f"‚ö†Ô∏è –ú–æ–≤–∞ {get_language_name(language_code)} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –º–æ–¥–µ–ª–ª—é {model}")
            logger.warning(f"‚ö†Ô∏è –ù–ï–ü–Ü–î–¢–†–ò–ú–£–í–ê–ù–ê –ú–û–í–ê {language_code} –¥–ª—è –º–æ–¥–µ–ª—ñ {model}")
            return
        
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", parse_mode="HTML")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        user_data = await state.get_data()
        model = user_data.get('model', 'basic')
        from keyboards.inline import get_language_keyboard
        keyboard = get_language_keyboard(model)
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–í–ê –û–†–ò–ì–Ü–ù–ê–õ–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_source_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language')
        model = user_data.get('model', 'basic')
        
        if source_lang and source_lang == language_code:
            await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
            logger.warning(f"‚ö†Ô∏è –û–î–ù–ê–ö–û–í–Ü –ú–û–í–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –º–æ–≤–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ
        supported_languages = get_supported_languages(model)
        if language_code not in supported_languages:
            await callback.message.answer(f"‚ö†Ô∏è –ú–æ–≤–∞ {get_language_name(language_code)} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –º–æ–¥–µ–ª–ª—é {model}")
            logger.warning(f"‚ö†Ô∏è –ù–ï–ü–Ü–î–¢–†–ò–ú–£–í–ê–ù–ê –ú–û–í–ê {language_code} –¥–ª—è –º–æ–¥–µ–ª—ñ {model}")
            return
        
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)", parse_mode="HTML")
        
        logger.info(f"‚úÖ –ú–û–í–ê –ü–ï–†–ï–ö–õ–ê–î–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_target_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def handle_language_pagination(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –º–æ–≤"""
    try:
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        page = int(callback.data.split("_")[-1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        user_data = await state.get_data()
        model = user_data.get('model', 'basic')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        from keyboards.inline import get_language_keyboard
        keyboard = get_language_keyboard(model, page=page)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –º–æ–≤: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}, –º–æ–¥–µ–ª—å {model}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_language_pagination: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def handle_page_info(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    try:
        await callback.answer("‚ÑπÔ∏è –¶–µ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_page_info: {str(e)}")
        await callback.answer()

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í –ó –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –§–Ü–õ–¨–¢–†–ê–ú–ò"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í LANGUAGE ===")
    
    # Handler –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (—Å—Ç–∞–Ω waiting_for_source_language)
    dp.register_callback_query_handler(
        choose_source_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_source_language
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_source_language")
    
    # Handler –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É (—Å—Ç–∞–Ω waiting_for_target_language)
    dp.register_callback_query_handler(
        choose_target_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_target_language
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_target_language")
    
    # Handler –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –º–æ–≤
    dp.register_callback_query_handler(
        handle_language_pagination,
        lambda c: c.data and c.data.startswith("lang_page_"),
        state=[TranslationStates.waiting_for_source_language, TranslationStates.waiting_for_target_language]
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ handle_language_pagination")
    
    # Handler –¥–ª—è page_info
    dp.register_callback_query_handler(
        handle_page_info,
        lambda c: c.data == "page_info",
        state=[TranslationStates.waiting_for_source_language, TranslationStates.waiting_for_target_language]
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ handle_page_info")
    
    logger.info("=== –£–°–Ü HANDLER'–ò LANGUAGE –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")