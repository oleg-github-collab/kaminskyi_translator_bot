from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging
from utils.translate_utils import (
    fetch_deepl_languages,
    fetch_otranslator_languages,
)
import math

logger = logging.getLogger(__name__)

# Languages will be fetched from APIs
LANGUAGE_NAMES = {}
LANGUAGE_NAMES.update(fetch_deepl_languages())
LANGUAGE_NAMES.update(fetch_otranslator_languages())

LANGUAGE_CODES = sorted(LANGUAGE_NAMES.keys())
LANGUAGES_PER_PAGE = 9

# Map language codes to appropriate flag codes
FLAG_OVERRIDES = {
    "EN": "US",  # show US flag for English
    "UK": "UA",  # Ukrainian
    "BE": "BY",  # Belarusian
    "CS": "CZ",
    "DA": "DK",
    "EL": "GR",
    "NB": "NO",
    "SR": "RS",

    "UK": "UA",   # Ukrainian
    "PT": "PT",
    "PT-BR": "BR",
    "ZH": "CN",
    "JA": "JP",
    "KO": "KR",
    "AR": "SA",
    "HE": "IL",
    "HI": "IN",
    "VI": "VN",
    "KA": "GE",
    "KK": "KZ",
}

# Fallback minimal set if APIs fail
if not LANGUAGE_NAMES:
    LANGUAGE_NAMES = {
        "UK": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "EN": "English",
        "DE": "Deutsch",
        "FR": "Fran√ßais",
        "ES": "Espa√±ol",
        "PL": "Polski",
        "RU": "–†—É—Å—Å–∫–∏–π",
        "ZH": "‰∏≠Êñá",
        "JA": "Êó•Êú¨Ë™û",
    }
    LANGUAGE_CODES = sorted(LANGUAGE_NAMES.keys())

def get_language_name(code):
    return LANGUAGE_NAMES.get(code, code)


def get_flag(code: str) -> str:
    """Return emoji flag for language code"""

    code_up = code.upper()
    # Try full code override first, then base ISO code
    flag_code = FLAG_OVERRIDES.get(code_up)
    if not flag_code:
        base_code = code_up.split("-")[0]
        flag_code = FLAG_OVERRIDES.get(base_code, base_code)
    if len(flag_code) == 2 and flag_code.isalpha():
        base = 0x1F1E6
        return chr(base + ord(flag_code[0]) - 65) + chr(base + ord(flag_code[1]) - 65)
    base_code = code.split("-")[0].upper()
    flag_code = FLAG_OVERRIDES.get(base_code, base_code)
    if len(flag_code) == 2 and flag_code.isalpha():
        base = 0x1F1E6
        return chr(base + ord(flag_code[0]) - 65) + chr(base + ord(flag_code[1]) - 65)


    code = code.split("-")[0].upper()
    if len(code) == 2 and code.isalpha():
        base = 0x1F1E6
        return chr(base + ord(code[0]) - 65) + chr(base + ord(code[1]) - 65)
    code = code.split("-")[0]
    if len(code) == 2:
        return chr(0x1F1E6 + ord(code[0].upper()) - 65) + chr(0x1F1E6 + ord(code[1].upper()) - 65)

    return ""


def build_language_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–æ–≤ –¥–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    return build_language_keyboard_page(0)


def build_language_keyboard_page(page: int) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    subset = LANGUAGE_CODES[page * LANGUAGES_PER_PAGE:(page + 1) * LANGUAGES_PER_PAGE]
    for code in subset:
        name = LANGUAGE_NAMES[code]
        flag = get_flag(code)
        keyboard.insert(types.InlineKeyboardButton(f"{flag} {name}", callback_data=f"lang_{code}"))

    total_pages = int(math.ceil(len(LANGUAGE_CODES) / LANGUAGES_PER_PAGE))
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"langpage_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"langpage_{page+1}"))
    if nav_buttons:
        keyboard.row(*nav_buttons)
    return keyboard


async def switch_language_page(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º–æ–≤"""
    await callback.answer()
    page = int(callback.data.split("_")[1])
    keyboard = build_language_keyboard_page(page)
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except Exception:
        await callback.message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –û–†–ò–ì–Ü–ù–ê–õ–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–≤
        keyboard = build_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–í–ê –û–†–ò–ì–Ü–ù–ê–õ–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_source_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–í–ò –ü–ï–†–ï–ö–õ–ê–î–£: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("lang_"):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {callback.data}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É
        language_code = callback.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language')
        if source_lang and source_lang == language_code:
            await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
            logger.warning(f"‚ö†Ô∏è –û–î–ù–ê–ö–û–í–Ü –ú–û–í–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            return
        
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = get_language_name(language_code)
        await callback.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É: {lang_name}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–π–ª
        await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)", parse_mode="HTML")
        
        logger.info(f"‚úÖ –ú–û–í–ê –ü–ï–†–ï–ö–õ–ê–î–£ {language_code} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_target_language –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_language(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ú–û–í"""
    dp.register_callback_query_handler(
        choose_source_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_source_language,
    )
    dp.register_callback_query_handler(
        choose_target_language,
        lambda c: c.data and c.data.startswith("lang_"),
        state=TranslationStates.waiting_for_target_language,
    )
    dp.register_callback_query_handler(
        switch_language_page,
        lambda c: c.data and c.data.startswith("langpage_"),
        state=TranslationStates.waiting_for_source_language,
    )
    dp.register_callback_query_handler(
        switch_language_page,
        lambda c: c.data and c.data.startswith("langpage_"),
        state=TranslationStates.waiting_for_target_language,
    )
