from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_language_keyboard
from states import TranslationStates
from locales.messages import MESSAGES
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def choose_source_language(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É"""
    try:
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        language_code = callback.data.split("_")[1]  # lang_EN, lang_DE —Ç–æ—â–æ
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(source_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_target_language
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 3 –∑ 5:</b> " + MESSAGES["choose_target_language"][user_lang]
        keyboard = get_language_keyboard()
        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "selected_source_language", language_code)
        
    except Exception as e:
        logger.error(f"Error in choose_source_language for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏", show_alert=True)

async def choose_target_language(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    try:
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        language_code = callback.data.split("_")[1]  # lang_EN, lang_DE —Ç–æ—â–æ
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(target_language=language_code)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_file
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 4 –∑ 5:</b> " + MESSAGES["send_file"][user_lang]
        await callback.message.answer(message_text, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "selected_target_language", language_code)
        
    except Exception as e:
        logger.error(f"Error in choose_target_language for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏", show_alert=True)

def register_handlers_language(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è handler'—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤"""
    # –î–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
    dp.register_callback_query_handler(choose_source_language, 
                                     lambda c: c.data and c.data.startswith("lang_"), 
                                     state=TranslationStates.waiting_for_source_language)
    
    # –î–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    dp.register_callback_query_handler(choose_target_language, 
                                     lambda c: c.data and c.data.startswith("lang_"), 
                                     state=TranslationStates.waiting_for_target_language)