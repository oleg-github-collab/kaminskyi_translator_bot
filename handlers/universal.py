from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from utils.simple_debug import debug_callback, log_action
from utils.flow_manager import flow_manager, safe_callback_handler
from utils.language_system import (
    create_language_menu_keyboard, create_popular_languages_keyboard,
    create_all_languages_keyboard, create_regional_keyboard,
    LANGUAGE_REGIONS
)
import logging

logger = logging.getLogger(__name__)

@debug_callback
async def universal_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –í–°–Ü–• CALLBACK'–Ü–í - FALLBACK –°–ò–°–¢–ï–ú–ê"""
    user_id = callback.from_user.id
    callback_data = callback.data
    
    try:
        logger.info(f"üîß –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö: {callback_data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        current_state = await state.get_state()
        user_data = await state.get_data()
        
        # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        log_action("universal_callback_received", user_id, f"data: {callback_data}, state: {current_state}")
        
        # === –û–ë–†–û–ë–ö–ê CALLBACK'–Ü–í –ü–û –¢–ò–ü–ê–• ===
        
        # 1. –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü
        if callback_data and callback_data.startswith("model_"):
            return await handle_model_selection(callback, state)
        
        # 2. –í–ò–ë–Ü–† –ú–û–í–ò - –¥–µ–ª–µ–≥—É—î–º–æ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        elif callback_data and callback_data.startswith("lang_page_"):
            # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –º–æ–≤
            from handlers.language import handle_language_pagination
            return await handle_language_pagination(callback, state)
        elif callback_data == "page_info":
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            from handlers.language import handle_page_info
            await handle_page_info(callback, state)
            return True
        elif callback_data and callback_data.startswith("lang_"):
            # –í–∏–±—ñ—Ä –º–æ–≤–∏
            current_state = await state.get_state()
            if "waiting_for_source_language" in str(current_state):
                from handlers.language import choose_source_language
                await choose_source_language(callback, state)
                return True
            elif "waiting_for_target_language" in str(current_state):
                from handlers.language import choose_target_language  
                await choose_target_language(callback, state)
                return True
            else:
                return await handle_language_selection(callback, state)
        
        # 3. –ü–õ–ê–¢–Ü–ñ–ù–Ü CALLBACK'–ò
        elif callback_data in ["process_payment", "payment_done", "upload_another", "payment_help"]:
            return await handle_payment_callbacks(callback, state)
        
        # 4. –ú–ï–ù–Æ –ú–û–í
        elif callback_data and callback_data.startswith("lang_menu_"):
            return await handle_language_menu(callback, state)
        
        # 5. –ù–ê–í–Ü–ì–ê–¶–Ü–ô–ù–Ü CALLBACK'–ò
        elif callback_data in ["continue_translate", "exit", "lang_menu_back"]:
            return await handle_navigation_callbacks(callback, state)
        
        # 6. –ù–ï–í–Ü–î–û–ú–Ü CALLBACK'–ò
        else:
            return await handle_unknown_callback(callback, state)
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ universal_callback_handler: {str(e)}")
        await callback.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
        
        # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        recovery_result = await flow_manager.handle_error_recovery(user_id, state, str(e))
        
        if recovery_result == "restarted":
            await callback.message.answer(
                "üîÑ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å.\n"
                "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:"
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
                types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
            )
            await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)

async def handle_model_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–î–ï–õ–Ü"""
    user_id = callback.from_user.id
    
    try:
        logger.info(f"üéØ –û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–î–ï–õ–Ü: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö
        if not callback.data.startswith("model_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å
        model_parts = callback.data.split("_")
        if len(model_parts) != 2:
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª—ñ")
            return False
        
        model = model_parts[1]
        if model not in ["basic", "epic"]:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–¥–µ–ª—å")
            return False
        
        await callback.answer()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å
        await state.update_data(model=model)
        
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        success = await flow_manager.safe_state_transition(
            user_id=user_id,
            state=state,
            target_state="waiting_for_source_language",
            trigger=f"model_selected_{model}"
        )
        
        if not success:
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É —Å—Ç–∞–Ω—É")
            return False
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
        model_name = "Kaminskyi Basic" if model == "basic" else "Kaminskyi Epic"
        await callback.message.answer(f"‚úÖ –û–±—Ä–∞–Ω–æ –º–æ–¥–µ–ª—å: {model_name}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ
        from handlers.language import get_supported_languages
        supported_langs = get_supported_languages(model)
        lang_count = len(supported_langs)
        
        await callback.message.answer(
            f"<b>–ö—Ä–æ–∫ 2/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:\n"
            f"üåç –î–æ—Å—Ç—É–ø–Ω–æ {lang_count} –º–æ–≤",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–æ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ  
        from keyboards.inline import get_language_keyboard
        keyboard = get_language_keyboard(model, page=0)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–î–ï–õ–¨ {model} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_model_selection: {str(e)}")
        return False

async def handle_language_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–í–ò"""
    user_id = callback.from_user.id
    current_state = await state.get_state()
    
    try:
        logger.info(f"üåê –û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–í–ò: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, —Å—Ç–∞–Ω: {current_state}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
        if not callback.data.startswith("lang_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –º–æ–≤–∏")
            return False
        
        language_code = callback.data.split("_")[1]
        await callback.answer()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–æ–≤–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from handlers.language import get_language_name, get_supported_languages
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        user_data = await state.get_data()
        model = user_data.get('model', 'basic')
        supported_languages = get_supported_languages(model)
        
        if language_code not in supported_languages:
            await callback.answer("‚ö†Ô∏è –ú–æ–≤–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ü—ñ—î—é –º–æ–¥–µ–ª–ª—é")
            return False
        
        lang_name = get_language_name(language_code)
        
        # –õ–û–ì–Ü–ö–ê –ó–ê–õ–ï–ñ–ù–û –í–Ü–î –ü–û–¢–û–ß–ù–û–ì–û –°–¢–ê–ù–£
        if current_state == "TranslationStates:waiting_for_source_language":
            # –í–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
            await state.update_data(source_language=language_code)
            
            await flow_manager.safe_state_transition(
                user_id=user_id,
                state=state,
                target_state="waiting_for_target_language",
                trigger=f"source_lang_selected_{language_code}"
            )
            
            await callback.message.answer(f"‚úÖ –ú–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {lang_name}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ
            lang_count = len(supported_languages)
            await callback.message.answer(
                f"<b>–ö—Ä–æ–∫ 3/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:\n"
                f"üåç –î–æ—Å—Ç—É–ø–Ω–æ {lang_count} –º–æ–≤",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–æ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ
            from keyboards.inline import get_language_keyboard
            keyboard = get_language_keyboard(model, page=0)
            await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=keyboard)
            
        elif current_state == "TranslationStates:waiting_for_target_language":
            # –í–∏–±—ñ—Ä –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
            user_data = await state.get_data()
            source_lang = user_data.get('source_language')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–æ–≤–∏
            if source_lang == language_code:
                await callback.message.answer("‚ö†Ô∏è –ú–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏!")
                return False
            
            await state.update_data(target_language=language_code)
            
            await flow_manager.safe_state_transition(
                user_id=user_id,
                state=state,
                target_state="waiting_for_file",
                trigger=f"target_lang_selected_{language_code}"
            )
            
            await callback.message.answer(f"‚úÖ –ú–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {lang_name}")
            await callback.message.answer("<b>–ö—Ä–æ–∫ 4/5:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É", parse_mode="HTML")
            await callback.message.answer("üìÑ –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: TXT, DOCX, PDF")
            
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏")
            return False
        
        logger.info(f"‚úÖ –ú–û–í–ê {language_code} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_language_selection: {str(e)}")
        return False

async def handle_payment_callbacks(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –ü–õ–ê–¢–Ü–ñ–ù–ò–• CALLBACK'–Ü–í"""
    user_id = callback.from_user.id
    
    try:
        logger.info(f"üí≥ –ü–õ–ê–¢–Ü–ñ–ù–ò–ô CALLBACK: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö handler'—ñ–≤ –∑ payment.py
        from handlers.payment import (
            process_payment, payment_done, upload_another, payment_help
        )
        
        if callback.data == "process_payment":
            return await safe_callback_handler(callback, state, process_payment, "process_payment")
        elif callback.data == "payment_done":
            return await safe_callback_handler(callback, state, payment_done, "payment_done")
        elif callback.data == "upload_another":
            return await safe_callback_handler(callback, state, upload_another, "upload_another")
        elif callback.data == "payment_help":
            return await safe_callback_handler(callback, state, payment_help, "payment_help")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_payment_callbacks: {str(e)}")
        return False

async def handle_language_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –ú–ï–ù–Æ –ú–û–í"""
    user_id = callback.from_user.id
    
    try:
        logger.info(f"üåç –ú–ï–ù–Æ –ú–û–í: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        menu_type = callback.data.replace("lang_menu_", "")
        await callback.answer()
        
        if menu_type == "popular":
            keyboard = create_popular_languages_keyboard()
            await callback.message.edit_text(
                "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –º–æ–≤–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif menu_type == "all":
            keyboard = create_all_languages_keyboard()
            await callback.message.edit_text(
                "üåç **–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif menu_type == "european":
            keyboard = create_regional_keyboard("European")
            await callback.message.edit_text(
                "üá™üá∫ **–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫—ñ –º–æ–≤–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif menu_type == "asian":
            keyboard = create_regional_keyboard("Asian")
            await callback.message.edit_text(
                "üåè **–ê–∑—ñ–π—Å—å–∫—ñ –º–æ–≤–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif menu_type == "african":
            keyboard = create_regional_keyboard("African")
            await callback.message.edit_text(
                "üåç **–ê—Ñ—Ä–∏–∫–∞–Ω—Å—å–∫—ñ –º–æ–≤–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif menu_type == "americas":
            keyboard = create_regional_keyboard("Americas")
            await callback.message.edit_text(
                "üåé **–ú–æ–≤–∏ –ê–º–µ—Ä–∏–∫–∏:**\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –º–µ–Ω—é")
            return False
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–æ –≤—Å—ñ—Ö –º–µ–Ω—é
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="lang_menu_back")
        keyboard.add(back_button)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_language_menu: {str(e)}")
        return False

async def handle_navigation_callbacks(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –ù–ê–í–Ü–ì–ê–¶–Ü–ô–ù–ò–• CALLBACK'–Ü–í"""
    user_id = callback.from_user.id
    
    try:
        logger.info(f"üß≠ –ù–ê–í–Ü–ì–ê–¶–Ü–ô–ù–ò–ô CALLBACK: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        if callback.data == "continue_translate":
            # –ü–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            await flow_manager.reset_user_completely(user_id, state)
            await flow_manager.safe_state_transition(user_id, state, "choosing_model", "continue_translate")
            
            await callback.answer()
            await callback.message.answer(
                "üéØ <b>–ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥</b>\n\n"
                "<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:",
                parse_mode="HTML"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
                types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
            )
            await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
            
        elif callback.data == "exit":
            await callback.answer()
            await flow_manager.reset_user_completely(user_id, state)
            await callback.message.answer("üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è! –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
            
        elif callback.data == "lang_menu_back":
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–≤
            await callback.answer()
            keyboard = create_language_menu_keyboard()
            current_state = await state.get_state()
            
            if "waiting_for_source_language" in str(current_state):
                text = "üåç **–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:**\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
            else:
                text = "üåç **–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É:**\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_navigation_callbacks: {str(e)}")
        return False

async def handle_unknown_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –ù–ï–í–Ü–î–û–ú–ò–• CALLBACK'–Ü–í"""
    user_id = callback.from_user.id
    
    try:
        logger.warning(f"‚ùì –ù–ï–í–Ü–î–û–ú–ò–ô CALLBACK: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        await callback.answer("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
        await flow_manager.send_progress_message(user_id, state, callback.message)
        
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        await callback.message.answer(
            "‚ùì –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÑ –ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="continue_translate"),
                types.InlineKeyboardButton("üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å", callback_data="show_progress")
            )
        )
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_unknown_callback: {str(e)}")
        return False

def register_handlers_universal(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–û–ì–û HANDLER'–ê - –û–°–¢–ê–ù–ù–Ü–ô –í –ß–ï–†–ó–Ü"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–û–ì–û HANDLER'–ê ===")
    
    # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π handler –¥–ª—è –≤—Å—ñ—Ö callback'—ñ–≤ (–Ω–∞–π–Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
    dp.register_callback_query_handler(universal_callback_handler, lambda c: True, state="*")
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ universal_callback_handler")
    
    logger.info("=== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô HANDLER –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")