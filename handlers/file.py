from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

# Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏
def _get_language_name(lang_code):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏ –∑–∞ –∫–æ–¥–æ–º"""
    languages = {
        "UK": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "EN": "English", 
        "DE": "Deutsch",
        "FR": "Fran√ßais",
        "ES": "Espa√±ol",
        "PL": "Polski"
    }
    return languages.get(lang_code, lang_code)

async def handle_file(message: types.Message, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£"""
    try:
        logger.info(f"–û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
        if not message.document:
            await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (txt, docx, pdf)")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
        file_extension = message.document.file_name.split('.')[-1].lower()
        if file_extension not in ['txt', 'docx', 'pdf']:
            await message.answer("‚ö†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ: txt, docx, pdf")
            return
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –º–æ–≤–∏
        user_data = await state.get_data()
        source_lang = user_data.get('source_language', 'UK')
        target_lang = user_data.get('target_language', 'EN')
        
        source_name = _get_language_name(source_lang)
        target_name = _get_language_name(target_lang)
        
        await message.answer(f"üìÑ –§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ!")
        await message.answer(f"üî§ –ü–µ—Ä–µ–∫–ª–∞–¥: {source_name} ‚Üí {target_name}")
        
        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏
        await message.answer("üìä –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–∞–π–ª...")
        await message.answer("üî¢ –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—é —Å–∏–º–≤–æ–ª–∏...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏
        await TranslationStates.waiting_for_payment_confirmation.set()
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer("üí≥ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:</b>", parse_mode="HTML")
        await message.answer("‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤: 514\n‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 0.65 ‚Ç¨")
        
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="process_payment"))
        keyboard.add(types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"))
        
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        
        logger.info(f"–§–ê–ô–õ –û–ë–†–û–ë–õ–ï–ù–û –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ handle_file: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É")

def register_handlers_file(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –§–ê–ô–õ–£"""
    dp.register_message_handler(handle_file, content_types=["document"], state=TranslationStates.waiting_for_file)