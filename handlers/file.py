from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from utils.file_validation import comprehensive_file_validation, create_validation_report, get_supported_formats_text
from utils.language_system import get_language_name
from utils.simple_debug import debug_callback, log_action
import logging
import os

logger = logging.getLogger(__name__)

@debug_callback
async def handle_file(message: types.Message, state: FSMContext):
    """üöÄ –£–õ–¨–¢–†–ê–ü–û–¢–£–ñ–ù–ê –û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£ –ó –ü–û–í–ù–û–Æ –í–ê–õ–Ü–î–ê–¶–Ü–Ñ–Æ"""
    user_id = message.from_user.id
    log_action("file_upload_start", user_id, "processing file")
    
    try:
        logger.info(f"üìÅ –£–õ–¨–¢–†–ê –û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê–Ø–í–ù–û–°–¢–Ü –§–ê–ô–õ–£
        if not message.document:
            logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î —Ñ–∞–π–ª—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            await message.answer(
                "‚ö†Ô∏è **–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n" + get_supported_formats_text(),
                parse_mode="Markdown"
            )
            return
        
        # 2. –ü–û–ß–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê –†–û–ó–ú–Ü–†–£
        file_size_mb = message.document.file_size / 1024 / 1024 if message.document.file_size else 0
        logger.info(f"üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size_mb:.2f} MB")
        
        if message.document.file_size and message.document.file_size > 500 * 1024 * 1024:  # 500MB
            await message.answer(
                f"‚ùå **–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π**\n\n"
                f"–†–æ–∑–º—ñ—Ä: {file_size_mb:.1f} MB\n"
                f"–ú–∞–∫—Å–∏–º—É–º: 500 MB\n\n"
                + get_supported_formats_text(),
                parse_mode="Markdown"
            )
            return
        
        # 3. –ü–û–ö–ê–ó–£–Ñ–ú–û –ü–†–û–¶–ï–°
        processing_msg = await message.answer("üîÑ **–û–±—Ä–æ–±–ª—è—é —Ñ–∞–π–ª...**", parse_mode="Markdown")
        
        # 4. –°–¢–í–û–†–ï–ù–ù–Ø –ë–ï–ó–ü–ï–ß–ù–û–ì–û –®–õ–Ø–•–£
        os.makedirs('temp', exist_ok=True)
        safe_filename = f"{user_id}_{message.document.file_id}_{message.document.file_name}"
        file_path = os.path.join('temp', safe_filename)
        
        # 5. –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–ê–ô–õ–£
        try:
            await processing_msg.edit_text("‚¨áÔ∏è **–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...**", parse_mode="Markdown")
            file_info = await message.bot.get_file(message.document.file_id)
            await message.bot.download_file(file_info.file_path, file_path)
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {file_path}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            await processing_msg.edit_text("‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É**", parse_mode="Markdown")
            return
        
        # 6. –£–õ–¨–¢–†–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø
        await processing_msg.edit_text("üîç **–ê–Ω–∞–ª—ñ–∑—É—é —Ñ–∞–π–ª...**", parse_mode="Markdown")
        validation_result = comprehensive_file_validation(file_path, message.document.file_name)
        
        # 7. –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–£ –í–ê–õ–Ü–î–ê–¶–Ü–á
        if not validation_result.is_valid:
            # –û—á–∏—â—É—î–º–æ —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except:
                pass
            
            await processing_msg.edit_text(
                f"‚ùå **–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞**\n\n{validation_result.error_message}\n\n" + get_supported_formats_text(),
                parse_mode="Markdown"
            )
            log_action("file_validation_failed", user_id, validation_result.error_message)
            return
        
        # 8. –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–ê
        user_data = await state.get_data()
        source_lang = user_data.get('source_language', 'UK')
        target_lang = user_data.get('target_language', 'EN') 
        model = user_data.get('model', 'basic')
        
        # 9. –†–û–ó–†–ê–•–£–ù–û–ö –¢–û–ß–ù–û–á –í–ê–†–¢–û–°–¢–Ü
        await processing_msg.edit_text("üí∞ **–†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å...**", parse_mode="Markdown")
        from utils.file_validation import PRICING
        price_per_char = PRICING.get(model, PRICING['basic'])
        total_cost = validation_result.char_count * price_per_char
        
        # 10. –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
        await state.update_data(
            file_path=file_path,
            file_extension=validation_result.extension,
            file_size=validation_result.size_bytes,
            char_count=validation_result.char_count,
            estimated_cost=total_cost,
            processing_time=validation_result.processing_time_estimate,
            file_validated=True
        )
        
        # 11. –ü–ï–†–ï–•–Ü–î –î–û –û–ü–õ–ê–¢–ò
        await TranslationStates.waiting_for_payment_confirmation.set()
        
        # 12. –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
        await processing_msg.delete()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–∫–ª–∞–¥
        source_name = get_language_name(source_lang)
        target_name = get_language_name(target_lang)
        model_name = "Kaminskyi Basic" if model == "basic" else "Kaminskyi Epic"
        
        await message.answer(
            f"‚úÖ **–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!**\n\n"
            f"üìÑ **–§–∞–π–ª:** {message.document.file_name}\n"
            f"üî§ **–ü–µ—Ä–µ–∫–ª–∞–¥:** {source_name} ‚Üí {target_name}\n"
            f"‚öôÔ∏è **–ú–æ–¥–µ–ª—å:** {model_name}",
            parse_mode="Markdown"
        )
        
        # –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        report = create_validation_report(validation_result)
        await message.answer(report, parse_mode="Markdown")
        
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ —î
        if validation_result.warnings:
            warning_text = "‚ö†Ô∏è **–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:**\n" + "\n".join(f"‚Ä¢ {w}" for w in validation_result.warnings)
            await message.answer(warning_text, parse_mode="Markdown")
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", callback_data="process_payment"))
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="payment_help")
        )
        
        await message.answer("**–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:**", reply_markup=keyboard, parse_mode="Markdown")
        
        log_action("file_upload_success", user_id, f"{validation_result.char_count:,} chars, {total_cost:.2f}‚Ç¨")
        logger.info(f"‚úÖ –£–õ–¨–¢–†–ê –§–ê–ô–õ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {validation_result.char_count:,} —Å–∏–º–≤–æ–ª—ñ–≤")
        
    except Exception as e:
        log_action("file_upload_error", user_id, str(e))
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ handle_file –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        try:
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)
        except:
            pass
            
        await message.answer(
            "‚ùå **–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É**\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É\n"
            "‚Ä¢ –ó–º–µ–Ω—à–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É\n"
            "‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª –∑–Ω–æ–≤—É\n\n"
            + get_supported_formats_text(),
            parse_mode="Markdown"
        )

def register_handlers_file(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –§–ê–ô–õ–£"""
    dp.register_message_handler(handle_file, content_types=["document"], state=TranslationStates.waiting_for_file)