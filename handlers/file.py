from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging
from utils.file_utils import count_chars_in_file
from utils.payment_utils import calculate_price
import os

logger = logging.getLogger(__name__)

async def handle_file(message: types.Message, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£"""
    try:
        logger.info(f"üìÅ –û–ë–†–û–ë–ö–ê –§–ê–ô–õ–£ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
        if not message.document:
            logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î —Ñ–∞–π–ª—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (txt, docx, pdf)")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
        file_extension = os.path.splitext(message.document.file_name)[1].lower()
        if file_extension not in ['.txt', '.docx', '.pdf']:
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É {file_extension} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ: txt, docx, pdf")
            return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        os.makedirs('temp', exist_ok=True)
        file_path = f"temp/{message.from_user.id}_{message.document.file_id}{file_extension}"
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        file_info = await message.bot.get_file(message.document.file_id)
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        await state.update_data(file_path=file_path, file_extension=file_extension)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏
        await TranslationStates.waiting_for_payment_confirmation.set()
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        user_data = await state.get_data()
        source_lang = user_data.get('source_language', 'UK')
        target_lang = user_data.get('target_language', 'EN')
        model = user_data.get('model', 'basic')
        
        from handlers.language import get_language_name
        source_name = get_language_name(source_lang)
        target_name = get_language_name(target_lang)
        model_name = "Kaminskyi Basic" if model == "basic" else "Kaminskyi Epic"
        
        await message.answer(f"üìÑ –§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ!")
        await message.answer(f"üî§ –ü–µ—Ä–µ–∫–ª–∞–¥: {source_name} ‚Üí {target_name}")
        await message.answer(f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: {model_name}")
        
        # –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É
        await message.answer("üìä –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–∞–π–ª...")
        char_count = count_chars_in_file(file_path)
        price = calculate_price(char_count, model)
        await state.update_data(char_count=char_count, price=price)

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer("üí≥ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:</b>", parse_mode="HTML")
        await message.answer(f"‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤: {char_count}\n‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price} ‚Ç¨")
        
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="process_payment"))
        keyboard.add(types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"))
        
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –§–ê–ô–õ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ handle_file –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É")

def register_handlers_file(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –§–ê–ô–õ–£"""
    dp.register_message_handler(handle_file, content_types=["document"], state=TranslationStates.waiting_for_file)