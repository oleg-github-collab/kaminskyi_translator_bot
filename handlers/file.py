import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from utils.file_utils import count_chars_in_file
from utils.payment_utils import calculate_price, create_payment_session
from states import TranslationStates
from locales.messages import MESSAGES
from config import TEMP_DIR
from utils.logger import log_user_action, log_error
from keyboards.inline import get_file_action_keyboard
import logging

logger = logging.getLogger(__name__)

async def handle_file(message: types.Message, state: FSMContext):
    """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ù–ê–î–Ü–ô–ù–ê –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É"""
    try:
        logger.info(f"=== –ü–û–ß–ê–¢–û–ö –û–ë–†–û–ë–ö–ò –§–ê–ô–õ–£ === User: {message.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
        if not message.document:
            logger.warning(f"–ù–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            user_lang = message.from_user.language_code or "en"
            user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
            await message.answer("‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞</b>\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (txt, docx, pdf)", parse_mode="HTML")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
        file_extension = os.path.splitext(message.document.file_name)[1].lower()
        logger.info(f"–¢–∏–ø —Ñ–∞–π–ª—É: {file_extension} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        if file_extension not in ['.txt', '.docx', '.pdf']:
            logger.warning(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É {file_extension} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è <b>–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç</b>\n–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: TXT, DOCX, PDF", parse_mode="HTML")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
        if message.document.file_size > 20 * 1024 * 1024:  # 20 MB
            logger.warning(f"–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({message.document.file_size}) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è <b>–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π</b>\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 20 –ú–ë", parse_mode="HTML")
            return
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await message.answer("üì• <b>–ö—Ä–æ–∫ 5/5:</b> –û—Ç—Ä–∏–º—É—é —Ñ–∞–π–ª...", parse_mode="HTML")
        logger.info(f"–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        os.makedirs(TEMP_DIR, exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {TEMP_DIR} –≥–æ—Ç–æ–≤–∞")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        file_path = f"{TEMP_DIR}/{message.from_user.id}_{unique_id}{file_extension}"
        logger.info(f"–®–ª—è—Ö —Ñ–∞–π–ª—É: {file_path}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        try:
            await message.answer("üìä –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–∞–π–ª...")
            file_info = await message.bot.get_file(message.document.file_id)
            await message.bot.download_file(file_info.file_path, file_path)
            logger.info(f"–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        except Exception as download_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(download_error)}")
            await message.answer("‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª —â–µ —Ä–∞–∑.", parse_mode="HTML")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É
        if not os.path.exists(file_path):
            logger.error(f"–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {file_path} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è <b>–§–∞–π–ª –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")
            return
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            logger.error(f"–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π: {file_path} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è <b>–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ –≤–º—ñ—Å—Ç–æ–º.", parse_mode="HTML")
            if os.path.exists(file_path):
                os.remove(file_path)
            return
        
        logger.info(f"–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
        await message.answer("üî¢ –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—é —Å–∏–º–≤–æ–ª–∏...")
        char_count = count_chars_in_file(file_path)
        
        logger.info(f"–ü—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª—ñ–≤: {char_count} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        if char_count is None or char_count == 0:
            logger.warning(f"–ù—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —Ñ–∞–π–ª—É {file_path} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            await message.answer("‚ö†Ô∏è <b>–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–∞–π–ª.", parse_mode="HTML")
            # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            return
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏
        user_data = await state.get_data()
        model = user_data.get('model', 'basic')
        price = calculate_price(char_count, model)
        
        logger.info(f"–¶—ñ–Ω–∞: {price}‚Ç¨ –¥–ª—è {char_count} —Å–∏–º–≤–æ–ª—ñ–≤, –º–æ–¥–µ–ª—å: {model} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        await state.update_data(
            file_path=file_path,
            file_extension=file_extension,
            char_count=char_count,
            price=price
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()
        logger.info(f"–°—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ waiting_for_payment_confirmation –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –æ–ø–ª–∞—Ç–∏
        user_lang = message.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–¥–µ–ª—ñ
        try:
            model_config = config.MODELS.get(model, config.MODELS["basic"])
            model_name = model_config["name"]
        except:
            model_name = "Kaminskyi Basic"
        
        stats_message = MESSAGES["file_stats"][user_lang].format(
            chars=char_count,
            model=model_name,
            price=price
        )
        
        await message.answer("üí≥ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:</b>", parse_mode="HTML")
        await message.answer(stats_message, parse_mode="HTML")
        
        # –°–¢–í–û–†–Æ–Ñ–ú–û –°–ü–†–ê–í–ñ–ù–Æ –ö–ù–û–ü–ö–£ –û–ü–õ–ê–¢–ò
        try:
            logger.info(f"–°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
            payment_url = create_payment_session(price, message.from_user.id, char_count, model)
            
            if payment_url:
                logger.info(f"–°–µ—Å—ñ—è –æ–ø–ª–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –æ–ø–ª–∞—Ç–∏
                payment_keyboard = types.InlineKeyboardMarkup()
                payment_keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", url=payment_url))
                payment_keyboard.add(types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"))
                
                await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=payment_keyboard)
            else:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
                # –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
                backup_keyboard = get_file_action_keyboard()
                await message.answer("‚ö†Ô∏è –¢–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–ø–ª–∞—Ç–æ—é:", reply_markup=backup_keyboard)
                
        except Exception as payment_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(payment_error)}", exc_info=True)
            # –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            backup_keyboard = get_file_action_keyboard()
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –æ–ø–ª–∞—Ç–æ—é:", reply_markup=backup_keyboard)
        
        log_user_action(message.from_user.id, "uploaded_file", 
                       f"chars: {char_count}, model: {model}, price: {price}‚Ç¨, size: {file_size}")
        logger.info(f"=== –û–ë–†–û–ë–ö–£ –§–ê–ô–õ–£ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û === User: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ handle_file –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞</b>\n–ö–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–∞.", parse_mode="HTML")

def register_handlers_file(dp):
    dp.register_message_handler(handle_file, content_types=["document"], 
                              state=TranslationStates.waiting_for_file)