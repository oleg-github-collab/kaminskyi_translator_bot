from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–°–¢–ê–†–¢ –ë–û–¢–ê"""
    try:
        logger.info(f"START –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ü–û–í–ù–ï –°–ö–ò–î–ê–ù–ù–Ø
        await state.finish()
        await state.reset_data()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –º–æ–¥–µ–ª–µ–π
        welcome_message = "üéØ <b>Kaminskyi AI Translator</b>\n\n"
        welcome_message += "‚ö° <b>Basic</b> - —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ DeepL\n"
        welcome_message += "üéØ <b>Epic</b> - —è–∫—ñ—Å—Ç—å —á–µ—Ä–µ–∑ Gemini 2.5 Flash\n\n"
        welcome_message += "<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É:"
        
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä—è–º–æ —Ç—É—Ç
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
            types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
        )
        
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"START —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ cmd_start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º"""
    try:
        logger.info(f"–í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("model_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]
        await state.update_data(model=model)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_source_language
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer("<b>–ö—Ä–æ–∫ 2/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:", parse_mode="HTML")
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_UK"),
            types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_EN")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá©üá™ Deutsch", callback_data="lang_DE"),
            types.InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_FR")
        )
        keyboard.add(
            types.InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_ES"),
            types.InlineKeyboardButton("üáµüá± Polski", callback_data="lang_PL")
        )
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"–ú–û–î–ï–õ–¨ {model} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_model: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É")

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
        welcome_message = "üéØ <b>Kaminskyi AI Translator</b>\n\n<b>–ö—Ä–æ–∫ 1/5:</b> –ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:"
        await callback.message.answer(welcome_message, parse_mode="HTML")
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
            types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
        )
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"–ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ continue_translate: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–•–Ü–î –ó –ë–û–¢–ê"""
    try:
        await callback.answer()
        await state.finish()
        await state.reset_data()
        
        await callback.message.answer("üëã –î—è–∫—É—î–º–æ! –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: /start")
        logger.info(f"–í–ò–•–Ü–î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ exit_bot: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def upload_another(callback: types.CallbackQuery, state: FSMContext):
    """–ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –Ü–ù–®–ò–ô –§–ê–ô–õ"""
    try:
        await callback.answer()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await TranslationStates.waiting_for_file.set()
        
        await callback.message.answer("üì• –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)")
        logger.info(f"–Ü–ù–®–ò–ô –§–ê–ô–õ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ upload_another: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_start(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í - –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫"""
    # –°—Ç–∞—Ä—Ç –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    
    # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ - –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º
    dp.register_callback_query_handler(choose_model, lambda c: c.data and c.data.startswith("model_"))
    
    # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    dp.register_callback_query_handler(continue_translate, lambda c: c.data and c.data == "continue_translate")
    
    # –í–∏—Ö—ñ–¥
    dp.register_callback_query_handler(exit_bot, lambda c: c.data and c.data == "exit")
    
    # –Ü–Ω—à–∏–π —Ñ–∞–π–ª
    dp.register_callback_query_handler(upload_another, lambda c: c.data and c.data == "upload_another")