from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_model_keyboard, get_language_keyboard
from states import TranslationStates
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–°–¢–ê–†–¢ –ë–û–¢–ê"""
    try:
        logger.info(f"=== START –ë–û–¢–ê === User ID: {message.from_user.id}")
        
        # –ü–û–í–ù–ï –°–ö–ò–î–ê–ù–ù–Ø
        await state.finish()
        await state.reset_data()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = """üéØ <b>Kaminskyi AI Translator</b>

–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.

<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É:"""
        
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–æ–¥–µ–ª–µ–π
        keyboard = get_model_keyboard("en")
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"=== START –£–°–ü–Ü–®–ù–ò–ô === User ID: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ cmd_start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü - –ü–†–ê–¶–Æ–Ñ 100%"""
    try:
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü === User ID: {callback.from_user.id}, Data: {callback.data}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            logger.error(f"–ü–£–°–¢–Ü –î–ê–ù–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("model_"):
            logger.error(f"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–Ü –î–ê–ù–Ü: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        logger.info(f"Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]
        logger.info(f"–í–∏–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        await state.update_data(model=model)
        logger.info(f"–ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_source_language
        logger.info(f"–°—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await callback.message.delete()
        except:
            pass
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        model_name = "Kaminskyi Basic" if model == "basic" else "Kaminskyi Epic"
        await callback.message.answer(f"‚úÖ –û–±—Ä–∞–Ω–æ –º–æ–¥–µ–ª—å: <b>{model_name}</b>\n\nüìù <b>–ö—Ä–æ–∫ 2/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:", parse_mode="HTML")
        keyboard = get_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"=== –ú–û–î–ï–õ–¨ –í–ò–ë–†–ê–ù–ê –£–°–ü–Ü–®–ù–û === User ID: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ choose_model –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É")

async def upload_another(callback: types.CallbackQuery, state: FSMContext):
    """–ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –Ü–ù–®–ò–ô –§–ê–ô–õ"""
    try:
        logger.info(f"=== –ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –Ü–ù–®–ò–ô –§–ê–ô–õ === User ID: {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
        await callback.message.answer("üîÑ <b>–ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥</b>\n\n<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", parse_mode="HTML")
        keyboard = get_model_keyboard("en")
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"=== –ù–û–í–ò–ô –ü–ï–†–ï–ö–õ–ê–î –†–û–ó–ü–û–ß–ê–¢–û === User ID: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ upload_another –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"=== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£ === User ID: {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
        await callback.message.answer("üéØ <b>Kaminskyi AI Translator</b>\n\n<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", parse_mode="HTML")
        keyboard = get_model_keyboard("en")
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"=== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–ï === User ID: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ continue_translate –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–•–Ü–î –ó –ë–û–¢–ê"""
    try:
        logger.info(f"=== –í–ò–•–Ü–î –ó –ë–û–¢–ê === User ID: {callback.from_user.id}")
        await callback.answer()
        await state.finish()
        await state.reset_data()
        
        await callback.message.answer("üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Kaminskyi AI Translator!\n\n–ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É: /start")
        
        logger.info(f"=== –í–ò–•–Ü–î –£–°–ü–Ü–®–ù–ò–ô === User ID: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ exit_bot –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_start(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –°–¢–ê–†–¢–£ ===")
    
    # –°—Ç–∞—Ä—Ç –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ cmd_start")
    
    # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ - –ó –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –§–Ü–õ–¨–¢–†–ê–ú–ò
    dp.register_callback_query_handler(
        choose_model,
        lambda c: c.data and c.data.startswith("model_"),
        state=TranslationStates.choosing_model
    )
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_model –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª
    dp.register_callback_query_handler(
        upload_another,
        lambda c: c.data and c.data == "upload_another",
        state="*"
    )
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ upload_another")
    
    # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    dp.register_callback_query_handler(
        continue_translate,
        lambda c: c.data and c.data == "continue_translate",
        state="*"
    )
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ continue_translate")
    
    # –í–∏—Ö—ñ–¥
    dp.register_callback_query_handler(
        exit_bot,
        lambda c: c.data and c.data == "exit",
        state="*"
    )
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ exit_bot")
    
    logger.info("=== –£–°–Ü HANDLER'–ò –°–¢–ê–†–¢–£ –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")