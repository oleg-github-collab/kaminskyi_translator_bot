from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_model_keyboard, get_language_keyboard
from states import TranslationStates
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–ü–û–í–ù–ò–ô –°–¢–ê–†–¢ –ë–û–¢–ê"""
    try:
        logger.info(f"=== START –ë–û–¢–ê === User: {message.from_user.id}")
        
        # –ü–û–í–ù–ï –°–ö–ò–î–ê–ù–ù–Ø
        await state.finish()
        await state.reset_data()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = "üéØ <b>Kaminskyi AI Translator</b>\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É:"
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–æ–¥–µ–ª–µ–π
        keyboard = get_model_keyboard("en")
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        log_user_action(message.from_user.id, "started_bot")
        logger.info(f"=== START –£–°–ü–Ü–®–ù–ò–ô === User: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ cmd_start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–†–û–ë–û–ß–ò–ô –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü"""
    try:
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü === User: {callback.from_user.id}, Data: {callback.data}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("model_"):
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]
        await state.update_data(model=model)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_source_language
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        await callback.message.answer("üìù –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:")
        keyboard = get_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        log_user_action(callback.from_user.id, "selected_model", model)
        logger.info(f"=== –ú–û–î–ï–õ–¨ –í–ò–ë–†–ê–ù–ê === User: {callback.from_user.id}, Model: {model}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ choose_model –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É", show_alert=True)

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
        await callback.message.answer("üéØ <b>Kaminskyi AI Translator</b>\n\n–ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:")
        keyboard = get_model_keyboard("en")
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        log_user_action(callback.from_user.id, "continued_translation")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ continue_translate: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–•–Ü–î –ó –ë–û–¢–ê"""
    try:
        await callback.answer()
        await state.finish()
        await state.reset_data()
        
        await callback.message.answer("üëã –î—è–∫—É—î–º–æ! –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: /start")
        log_user_action(callback.from_user.id, "exited_bot")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ exit_bot: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_start(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í"""
    # –°—Ç–∞—Ä—Ç –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    
    # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ - –ë–ï–ó –û–ë–ú–ï–ñ–ï–ù–ù–Ø –°–¢–ê–ù–£
    dp.register_callback_query_handler(choose_model, lambda c: c.data and c.data.startswith("model_"))
    
    # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    dp.register_callback_query_handler(continue_translate, lambda c: c.data and c.data == "continue_translate")
    
    # –í–∏—Ö—ñ–¥
    dp.register_callback_query_handler(exit_bot, lambda c: c.data and c.data == "exit")