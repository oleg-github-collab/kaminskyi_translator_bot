from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from handlers.language import build_language_keyboard
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–ü–û–ß–ê–¢–û–ö –†–û–ë–û–¢–ò"""
    try:
        logger.info(f"üü¢ START –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –ü–û–í–ù–ï –°–ö–ò–î–ê–ù–ù–Ø
        await state.finish()
        await state.reset_data()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = (
            "üéØ <b>Kaminskyi AI Translator</b>\n\n"
            "‚ö° –®–≤–∏–¥–∫–∏–π —Ç–∞ —è–∫—ñ—Å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—ñ–≤\n"
            "üìÑ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: TXT, DOCX, PDF\n"
            "üí∞ –í–∏–≥—ñ–¥–Ω—ñ —Ü—ñ–Ω–∏\n\n"
            "<b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É:"
        )
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π - –°–¢–í–û–†–Æ–Ñ–ú–û –ü–†–Ø–ú–û –¢–£–¢
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
            types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
        )
        
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ START —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ cmd_start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü - –¶–ï –ì–û–õ–û–í–ù–ò–ô HANDLER"""
    try:
        logger.info(f"üîµ –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü: {callback.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        print(f"DEBUG: –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü –í–ò–ö–õ–ò–ö–ê–ù–û: {callback.data}")  # –î–ï–ë–ê–ì
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not callback.data:
            logger.warning(f"‚ö†Ô∏è –ü–£–°–¢–Ü –î–ê–ù–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        if not callback.data.startswith("model_"):
            logger.warning(f"‚ö†Ô∏è –ù–ï–ü–†–ê–í–ò–õ–¨–ù–Ü –î–ê–ù–Ü: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            return
        
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]  # model_basic –∞–±–æ model_epic
        await state.update_data(model=model)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_source_language
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        await callback.message.answer("<b>–ö—Ä–æ–∫ 2/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—É:", parse_mode="HTML")
        
        # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –º–æ–≤
        keyboard = build_language_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ú–û–î–ï–õ–¨ {model} –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ choose_model –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É")

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîÑ –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
        welcome_message = (
            "üéØ <b>Kaminskyi AI Translator</b>\n\n"
            "<b>–ö—Ä–æ–∫ 1/5:</b> –ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:"
        )
        await callback.message.answer(welcome_message, parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π - –°–¢–í–û–†–Æ–Ñ–ú–û –ü–†–Ø–ú–û –¢–£–¢
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("‚ö° Kaminskyi Basic", callback_data="model_basic"),
            types.InlineKeyboardButton("üéØ Kaminskyi Epic", callback_data="model_epic")
        )
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø —É—Å–ø—ñ—à–Ω–µ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ continue_translate –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–í–ò–•–Ü–î –ó –ë–û–¢–ê"""
    try:
        logger.info(f"üö™ –í–ò–•–Ü–î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        await state.finish()
        await state.reset_data()
        
        await callback.message.answer("üëã –î—è–∫—É—î–º–æ! –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: /start")
        logger.info(f"‚úÖ –í–ò–•–Ü–î —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ exit_bot –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_start(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í - –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í START ===")
    
    # –°—Ç–∞—Ä—Ç –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ cmd_start")
    
    # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ
    dp.register_callback_query_handler(
        choose_model,
        lambda c: c.data and c.data.startswith("model_"),
        state=TranslationStates.choosing_model,
    )
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_model")
    
    # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    dp.register_callback_query_handler(continue_translate, lambda c: c.data and c.data == "continue_translate")
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ continue_translate")
    
    # –í–∏—Ö—ñ–¥
    dp.register_callback_query_handler(exit_bot, lambda c: c.data and c.data == "exit")
    logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ exit_bot")
    
    logger.info("=== –£–°–Ü HANDLER'–ò START –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")