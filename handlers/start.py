from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_model_keyboard, get_continue_keyboard, get_language_keyboard
from states import TranslationStates
from locales.messages import MESSAGES
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–ü–û–ß–ê–¢–û–ö –ë–û–¢–ê - –∑–∞–≤–∂–¥–∏ –∑ —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞"""
    try:
        logger.info(f"=== START –ë–û–¢–ê === User: {message.from_user.id}")
        
        # –ó–ê–í–ñ–î–ò —Å–∫–∏–¥–∞—î–º–æ –≤–µ—Å—å —Å—Ç–∞–Ω
        await state.finish()
        await state.reset_data()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = message.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = "üéØ <b>Kaminskyi AI Translator</b>\n\n"
        welcome_message += "‚ö° –®–≤–∏–¥–∫–∏–π —Ç–∞ —è–∫—ñ—Å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—ñ–≤\n"
        welcome_message += "üìÑ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: TXT, DOCX, PDF\n"
        welcome_message += "üí∞ –í–∏–≥—ñ–¥–Ω—ñ —Ü—ñ–Ω–∏\n\n"
        welcome_message += "<b>–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É:</b>"
        
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        keyboard = get_model_keyboard(user_lang)
        step_message = "üéØ <b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å"
        await message.answer(step_message, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(message.from_user.id, "started_bot", f"language: {user_lang}")
        logger.info(f"=== START –£–°–ü–Ü–®–ù–ò–ô === User: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ cmd_start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è <b>–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥—É /start", parse_mode="HTML")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–û–î–ï–õ–Ü –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü === User: {callback.from_user.id}, Data: {callback.data}")
        
        # –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–•
        if not callback.data:
            logger.error(f"–ü–£–°–¢–Ü –î–ê–ù–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
            return
            
        if not callback.data.startswith("model_"):
            logger.error(f"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–Ü –î–ê–ù–Ü: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
            await callback.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
        
        await callback.answer()
        logger.info(f"Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]  # model_basic –∞–±–æ model_epic
        logger.info(f"–í–∏–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(model=model)
        logger.info(f"–ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        current_state = await state.get_state()
        logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º: {current_state} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        await TranslationStates.next()  # waiting_for_source_language
        logger.info(f"–°—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        logger.info(f"–ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_lang} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 2/5:</b> –ú–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É"
        keyboard = get_language_keyboard()
        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–≤–∞–º–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}")
        
        log_user_action(callback.from_user.id, "selected_model", model)
        logger.info(f"=== –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü –£–°–ü–Ü–®–ù–ò–ô === User: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ choose_model –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ", show_alert=True)

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"=== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–£ === User: {callback.from_user.id}")
        await callback.answer()
        
        # –†–ê–î–ò–ö–ê–õ–¨–ù–ï –°–ö–ò–î–ê–ù–ù–Ø
        await state.finish()
        await state.reset_data()
        await TranslationStates.choosing_model.set()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = "üéØ <b>Kaminskyi AI Translator</b>\n\n<b>–ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:</b>"
        await callback.message.answer(welcome_message, parse_mode="HTML")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        keyboard = get_model_keyboard(user_lang)
        step_message = "üéØ <b>–ö—Ä–æ–∫ 1/5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å"
        await callback.message.answer(step_message, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "continued_translation")
        logger.info(f"=== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–ï === User: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ continue_translate –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –í–ò–•–û–î–£ –ó –ë–û–¢–ê"""
    try:
        logger.info(f"=== –í–ò–•–Ü–î –ó –ë–û–¢–ê === User: {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è
        await state.finish()
        await state.reset_data()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ö—ñ–¥
        exit_message = "üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Kaminskyi AI Translator!\n\n–ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É: /start"
        await callback.message.answer(exit_message, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "exited_bot")
        logger.info(f"=== –í–ò–•–Ü–î –£–°–ü–Ü–®–ù–ò–ô === User: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ exit_bot –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

def register_handlers_start(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –í–°–Ü–• HANDLER'–Ü–í –î–õ–Ø –°–¢–ê–†–¢–£"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –°–¢–ê–†–¢–£ ===")
    
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ cmd_start")
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ (–¢–ï–ü–ï–† –ü–†–ê–í–ò–õ–¨–ù–û)
    dp.register_callback_query_handler(choose_model, 
                                     lambda c: c.data and c.data.startswith("model_"))
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ choose_model")
    
    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    dp.register_callback_query_handler(continue_translate, 
                                     lambda c: c.data and c.data == "continue_translate")
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ continue_translate")
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É
    dp.register_callback_query_handler(exit_bot, 
                                     lambda c: c.data and c.data == "exit")
    logger.info("–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ exit_bot")
    
    logger.info("=== –£–°–Ü HANDLER'–ò –°–¢–ê–†–¢–£ –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")