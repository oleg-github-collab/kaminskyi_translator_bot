from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import get_model_keyboard, get_language_keyboard
from states import TranslationStates
from locales.messages import MESSAGES
from utils.logger import log_user_action
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start - –∑–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞–Ω—É"""
    try:
        # –ó–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        await state.finish()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = message.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = MESSAGES["start"][user_lang]
        await message.answer(welcome_message, parse_mode="HTML")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        await TranslationStates.choosing_model.set()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        keyboard = get_model_keyboard(user_lang)
        step_message = "üéØ <b>–ö—Ä–æ–∫ 1 –∑ 5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É"
        await message.answer(step_message, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(message.from_user.id, "started_bot", f"language: {user_lang}")
        
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥—É /start", 
                           parse_mode="HTML")

async def choose_model(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
        if not callback.data or not callback.data.startswith("model_"):
            await callback.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
            
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–¥–µ–ª—å
        model = callback.data.split("_")[1]  # model_basic –∞–±–æ model_epic
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(model=model)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await TranslationStates.next()  # waiting_for_source_language
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –º–æ–≤–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        message_text = "üéØ <b>–ö—Ä–æ–∫ 2 –∑ 5:</b> " + MESSAGES["choose_source_language"][user_lang]
        keyboard = get_language_keyboard()
        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "selected_model", model)
        
    except Exception as e:
        logger.error(f"Error in choose_model for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ", show_alert=True)

async def continue_translate(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    try:
        await callback.answer()
        
        # –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞–Ω—É
        await state.finish()
        await TranslationStates.choosing_model.set()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_message = MESSAGES["start"][user_lang]
        await callback.message.answer(welcome_message, parse_mode="HTML")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
        keyboard = get_model_keyboard(user_lang)
        step_message = "üéØ <b>–ö—Ä–æ–∫ 1 –∑ 5:</b> –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª–∞–¥—É"
        await callback.message.answer(step_message, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "continued_translation")
        
    except Exception as e:
        logger.error(f"Error in continue_translate for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

async def exit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –±–æ—Ç–∞"""
    try:
        await callback.answer()
        await state.finish()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_lang = callback.from_user.language_code or "en"
        user_lang = user_lang if user_lang in ["uk", "en", "de", "fr", "es"] else "en"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ö—ñ–¥
        exit_message = "üëã " + MESSAGES["thank_you"][user_lang].split('\n')[0]
        await callback.message.answer(exit_message, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "exited_bot")
        
    except Exception as e:
        logger.error(f"Error in exit_bot for user {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

def register_handlers_start(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è handler'—ñ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç—É"""
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
    dp.register_callback_query_handler(choose_model, 
                                     lambda c: c.data and c.data.startswith("model_"), 
                                     state=TranslationStates.choosing_model)
    
    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    dp.register_callback_query_handler(continue_translate, 
                                     lambda c: c.data and c.data == "continue_translate")
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É
    dp.register_callback_query_handler(exit_bot, 
                                     lambda c: c.data and c.data == "exit")