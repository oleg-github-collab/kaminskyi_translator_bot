from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging
from utils.payment_utils import create_payment_session
from utils.logger import log_payment, log_error, log_user_action

from utils.payment_utils import create_payment_session, verify_payment
from handlers.translate import start_translation



logger = logging.getLogger(__name__)

async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –û–ü–õ–ê–¢–ò"""
    try:
        logger.info(f"üí≥ –û–ë–†–û–ë–ö–ê –û–ü–õ–ê–¢–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –î–∞–Ω—ñ –¥–ª—è –æ–ø–ª–∞—Ç–∏
        user_data = await state.get_data()
        price = user_data.get("price", 0.0)
        char_count = user_data.get("char_count", 0)
        model = user_data.get("model", "basic")

        session_url, session_id = create_payment_session(
            price, callback.from_user.id, char_count, model
        ) or (None, None)
        log_user_action(callback.from_user.id, "payment_session_created", f"model: {model}, price: {price}")

        if not session_url:
            await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é –æ–ø–ª–∞—Ç–∏")
            return

        await state.update_data(payment_session=session_id)

        await callback.message.answer(
            "üí≥ <b>–ö—Ä–æ–∫ 5/5:</b> –û–ø–ª–∞—Ç–∞",
            parse_mode="HTML",
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=session_url
            )
        )
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another")
        )

        await callback.message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏", reply_markup=keyboard)
        
        logger.info(
            f"‚úÖ –û–ü–õ–ê–¢–ê —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id} –Ω–∞ {price}‚Ç¨"
        )
        log_payment(callback.from_user.id, price, "initiated")
        

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        await start_translation(callback.message, state)

    except Exception as e:
        logger.error(
            f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ process_payment –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}"
        )
        log_error(e, "process_payment")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")


async def upload_another(callback: types.CallbackQuery, state: FSMContext):
    """–ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –Ü–ù–®–ò–ô –§–ê–ô–õ"""
    try:
        logger.info(f"üîÑ –Ü–ù–®–ò–ô –§–ê–ô–õ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await TranslationStates.waiting_for_file.set()
        
        await callback.message.answer("üì• –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)")
        logger.info(f"‚úÖ –Ü–ù–®–ò–ô –§–ê–ô–õ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        log_user_action(callback.from_user.id, "upload_another")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ upload_another –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        log_error(e, "upload_another")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_payment(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –û–ü–õ–ê–¢–ò"""
    dp.register_callback_query_handler(
        process_payment,
        lambda c: c.data == "process_payment",
        state=TranslationStates.waiting_for_payment_confirmation,
    )
    dp.register_callback_query_handler(
        upload_another,
        lambda c: c.data == "upload_another",
        state=TranslationStates.waiting_for_payment_confirmation,
    )
