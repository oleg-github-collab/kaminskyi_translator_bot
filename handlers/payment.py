from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from keyboards.inline import get_continue_keyboard
from utils.payment_utils import check_payment_status
import logging

logger = logging.getLogger(__name__)

async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏"""
    try:
        logger.info(f"=== –ü–†–û–¶–ï–° –û–ü–õ–ê–¢–ò === User: {callback.from_user.id}")
        await callback.answer()
        
        user_data = await state.get_data()
        price = user_data.get('price', 0)
        
        await callback.message.answer(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {price} ‚Ç¨</b>\n\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–ª–∞—Ç–∏.\n"
            "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –ø–æ—á–Ω–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_payment: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏")

async def payment_done(callback: types.CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏"""
    try:
        logger.info(f"=== –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –û–ü–õ–ê–¢–ò === User: {callback.from_user.id}")
        await callback.answer()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏
        user_data = await state.get_data()
        
        # TODO: –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏
        payment_confirmed = True  # –ó–∞–≥–ª—É—à–∫–∞
        
        if payment_confirmed:
            await TranslationStates.translating.set()
            await callback.message.answer("‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!</b>\n\n‚è≥ –ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–∫–ª–∞–¥...", parse_mode="HTML")
            
            # TODO: –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—É
            # translation_result = await translate_file(user_data)
            
            # –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
            await callback.message.answer("üìÑ <b>–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–§–∞–π–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.", parse_mode="HTML")
            
            await TranslationStates.completed.set()
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
            keyboard = get_continue_keyboard()
            await callback.message.answer("–©–æ –¥–∞–ª—ñ?", reply_markup=keyboard)
        else:
            await callback.message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ payment_done: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_payment(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –æ–ø–ª–∞—Ç–∏"""
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –û–ü–õ–ê–¢–ò ===")
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏
    dp.register_callback_query_handler(
        process_payment,
        lambda c: c.data and c.data == "process_payment",
        state=TranslationStates.waiting_for_payment_confirmation
    )
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
    dp.register_callback_query_handler(
        payment_done,
        lambda c: c.data and c.data == "payment_done",
        state=TranslationStates.waiting_for_payment_confirmation
    )
    
    logger.info("=== –û–ë–†–û–ë–ù–ò–ö–ò –û–ü–õ–ê–¢–ò –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û ===")