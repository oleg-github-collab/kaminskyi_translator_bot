from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from utils.logger import log_user_action, log_error
from keyboards.inline import get_payment_action_keyboard, get_continue_keyboard
import logging

logger = logging.getLogger(__name__)

async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç–∏"""
    try:
        logger.info(f"–ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ–ø–ª–∞—Ç–∏
        await TranslationStates.next()  # translating
        
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏...")
        await callback.message.answer("‚ö†Ô∏è –£–≤–∞–≥–∞: –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è")
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        keyboard = get_payment_action_keyboard()
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        
        log_user_action(callback.from_user.id, "clicked_payment_button")
        logger.info(f"–ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ process_payment –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

async def payment_done(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏"""
    try:
        logger.info(f"–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await TranslationStates.translating.set()
        
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        await callback.message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—É...")
        
        log_user_action(callback.from_user.id, "payment_confirmed")
        logger.info(f"–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ payment_done –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

async def upload_another_file(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ —Ñ–∞–π–ª—É"""
    try:
        logger.info(f"–ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ '—ñ–Ω—à–∏–π —Ñ–∞–π–ª' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await TranslationStates.waiting_for_file.set()
        
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ —Ñ–∞–π–ª—É
        user_data = await state.get_data()
        file_path = user_data.get('file_path')
        if file_path:
            import os
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {file_path}")
            except Exception as cleanup_error:
                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {str(cleanup_error)}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
        await state.update_data(
            file_path=None,
            file_extension=None,
            char_count=None,
            price=None
        )
        
        await callback.message.answer("üì• –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf):")
        
        log_user_action(callback.from_user.id, "upload_another_file")
        logger.info(f"–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —ñ–Ω—à–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ upload_another_file –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", show_alert=True)

def register_handlers_payment(dp):
    dp.register_callback_query_handler(process_payment, lambda c: c.data == "process_payment")
    dp.register_callback_query_handler(payment_done, lambda c: c.data == "payment_done")
    dp.register_callback_query_handler(upload_another_file, lambda c: c.data == "upload_another")