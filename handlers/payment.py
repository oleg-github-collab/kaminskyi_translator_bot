from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging

logger = logging.getLogger(__name__)

async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –û–ü–õ–ê–¢–ò"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ–ø–ª–∞—Ç–∏
        await TranslationStates.waiting_for_payment_confirmation.set()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏
        await callback.message.answer("üí≥ <b>–ö—Ä–æ–∫ 5/5:</b> –û–ø–ª–∞—Ç–∞", parse_mode="HTML")
        await callback.message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±–µ–∑ –æ–ø–ª–∞—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚è≠ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –æ–ø–ª–∞—Ç–∏", callback_data="payment_done"))
        keyboard.add(types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"))
        
        await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        
        logger.info(f"–û–ü–õ–ê–¢–ê –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ process_payment: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def payment_done(callback: types.CallbackQuery, state: FSMContext):
    """–û–ü–õ–ê–¢–ê –ó–î–Ü–ô–°–ù–ï–ù–ê"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await TranslationStates.translating.set()
        
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        await callback.message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—É...")
        
        logger.info(f"–û–ü–õ–ê–¢–ê –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ê –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–ü–û–ú–ò–õ–ö–ê –≤ payment_done: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

def register_handlers_payment(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –û–ü–õ–ê–¢–ò"""
    dp.register_callback_query_handler(process_payment, lambda c: c.data and c.data == "process_payment")
    dp.register_callback_query_handler(payment_done, lambda c: c.data and c.data == "payment_done")