from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
from utils.payment_utils import create_payment_session, calculate_price
from utils.error_handler import payment_error_handler, log_payment_action, validate_payment_data, safe_state_update
from keyboards.inline import get_payment_action_keyboard
import config
import logging

logger = logging.getLogger(__name__)

@payment_error_handler
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–ë–†–û–ë–ö–ê –û–ü–õ–ê–¢–ò"""
    try:
        logger.info(f"üí≥ –û–ë–†–û–ë–ö–ê –û–ü–õ–ê–¢–ò –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ state
        data = await state.get_data()
        char_count = data.get('char_count', 0)
        model = data.get('model', 'basic')
        user_id = callback.from_user.id
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        payment_data = {
            'char_count': char_count,
            'model': model,
            'amount': calculate_price(char_count, model)
        }
        
        if not validate_payment_data(payment_data):
            await callback.message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö</b>\n\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
            log_payment_action("validation_failed", user_id, payment_data)
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É
        price_eur = calculate_price(char_count, model)
        model_name = config.MODELS[model]['name']
        
        # –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –æ–ø–ª–∞—Ç–∏
        log_payment_action("payment_initiated", user_id, {
            'char_count': char_count,
            'model': model,
            'amount': price_eur
        })
        
        await callback.message.answer("üí≥ <b>–ö—Ä–æ–∫ 5/5:</b> –û–ø–ª–∞—Ç–∞", parse_mode="HTML")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Stripe —Å–µ—Å—ñ—é
        payment_url = create_payment_session(price_eur, user_id, char_count, model)
        
        if payment_url:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ–ø–ª–∞—Ç–∏
            await TranslationStates.waiting_for_payment_confirmation.set()
            await safe_state_update(state, payment_url=payment_url, amount=price_eur, payment_initiated=True)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –æ–ø–ª–∞—Ç–∏
            payment_details = (
                f"üìä <b>–î–µ—Ç–∞–ª—ñ –æ–ø–ª–∞—Ç–∏:</b>\n"
                f"üìù –°–∏–º–≤–æ–ª—ñ–≤: {char_count:,}\n"
                f"üéØ –ú–æ–¥–µ–ª—å: {model_name}\n"
                f"üí∞ –°—É–º–∞: {price_eur}‚Ç¨\n\n"
                f"üîí –ë–µ–∑–ø–µ—á–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stripe\n"
                f"üí≥ –ü—Ä–∏–π–º–∞—î–º–æ –≤—Å—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–∞—Ä—Ç–∏"
            )
            await callback.message.answer(payment_details, parse_mode="HTML")
            
            # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏ –∑ URL
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", url=payment_url))
            keyboard.add(types.InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π —Ñ–∞–π–ª", callback_data="upload_another"))
            keyboard.add(types.InlineKeyboardButton("‚ùì –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="payment_help"))
            
            await callback.message.answer(
                "üöÄ <b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n\n"
                "‚ö° –û–ø–ª–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –≤ –±–µ–∑–ø–µ—á–Ω–æ–º—É –≤—ñ–∫–Ω—ñ Stripe\n"
                "üîÑ –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –±–æ—Ç–∞",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ STRIPE –°–ï–°–Ü–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, —Å—É–º–∞: {price_eur}‚Ç¨")
        else:
            await callback.message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É</b>\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
                parse_mode="HTML"
            )
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Stripe —Å–µ—Å—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ process_payment –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É")
        await callback.message.answer(
            "‚ùå <b>–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞</b>\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
            parse_mode="HTML"
        )

async def payment_done(callback: types.CallbackQuery, state: FSMContext):
    """–û–ü–õ–ê–¢–ê –ó–î–Ü–ô–°–ù–ï–ù–ê"""
    try:
        logger.info(f"‚úÖ –û–ü–õ–ê–¢–ê –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ê –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await TranslationStates.translating.set()
        
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        await callback.message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—É...")
        
        logger.info(f"‚úÖ –û–ü–õ–ê–¢–ê –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ payment_done –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def upload_another(callback: types.CallbackQuery, state: FSMContext):
    """–ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –Ü–ù–®–ò–ô –§–ê–ô–õ"""
    try:
        logger.info(f"üîÑ –Ü–ù–®–ò–ô –§–ê–ô–õ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        await TranslationStates.waiting_for_file.set()
        
        await callback.message.answer("üì• –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (txt, docx, pdf)")
        logger.info(f"‚úÖ –Ü–ù–®–ò–ô –§–ê–ô–õ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ upload_another –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def payment_help(callback: types.CallbackQuery, state: FSMContext):
    """–î–û–í–Ü–î–ö–ê –ü–û –û–ü–õ–ê–¢–Ü"""
    try:
        await callback.answer()
        help_text = (
            "‚ùì <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –æ–ø–ª–∞—Ç—ñ:</b>\n\n"
            "üîí <b>–ë–µ–∑–ø–µ–∫–∞:</b> –í—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ Stripe - –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à—É –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–∏—Å—Ç–µ–º—É\n\n"
            "üí≥ <b>–°–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:</b>\n"
            "‚Ä¢ Visa, Mastercard, American Express\n"
            "‚Ä¢ Google Pay, Apple Pay\n"
            "‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –ø–µ—Ä–µ–∫–∞–∑—ñ\n\n"
            "‚ö° <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> –ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–∏—Ç—Ç—î–≤–æ\n\n"
            "üîÑ <b>–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b> –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n\n"
            "üìß <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> @KaminskyiSupport"
        )
        await callback.message.answer(help_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ payment_help: {str(e)}")

async def start_translation(callback: types.CallbackQuery, state: FSMContext):
    """–ü–û–ß–ê–¢–û–ö –ü–ï–†–ï–ö–õ–ê–î–£ –ü–Ü–°–õ–Ø –û–ü–õ–ê–¢–ò"""
    try:
        logger.info(f"üöÄ –ü–û–ß–ê–¢–û–ö –ü–ï–†–ï–ö–õ–ê–î–£ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await TranslationStates.translating.set()
        
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        await callback.message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —Ñ–∞–π–ª—É...")
        
        logger.info(f"‚úÖ –ü–ï–†–ï–ö–õ–ê–î —Ä–æ–∑–ø–æ—á–∞—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ start_translation –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–∫–ª–∞–¥—É")

async def payment_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –û–ü–õ–ê–¢–£"""
    try:
        await callback.answer()
        data = await state.get_data()
        char_count = data.get('char_count', 0)
        model = data.get('model', 'basic')
        
        price_eur = calculate_price(char_count, model)
        model_info = config.MODELS[model]
        
        details_text = (
            f"üí∞ <b>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É:</b>\n\n"
            f"üéØ <b>–ú–æ–¥–µ–ª—å:</b> {model_info['name']}\n"
            f"üìù <b>–û–ø–∏—Å:</b> {model_info['description']}\n"
            f"üìä <b>–°–∏–º–≤–æ–ª—ñ–≤ –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É:</b> {char_count:,}\n"
            f"üíµ <b>–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é:</b> {model_info['price_per_unit']:.2f}‚Ç¨ –∑–∞ {config.CHARS_PER_UNIT} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            f"üí∞ <b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> {model_info['min_price']:.2f}‚Ç¨\n"
            f"üßÆ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:</b> {char_count} √∑ {config.CHARS_PER_UNIT} √ó {model_info['price_per_unit']:.2f}‚Ç¨\n"
            f"üí≥ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {price_eur:.2f}‚Ç¨\n\n"
            f"üîí <b>–ë–µ–∑–ø–µ–∫–∞:</b> –ü–ª–∞—Ç—ñ–∂ —á–µ—Ä–µ–∑ Stripe (SSL —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è)\n"
            f"‚ö° <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> –ú–∏—Ç—Ç—î–≤–∞ –æ–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É"
        )
        
        await callback.message.answer(details_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ payment_details: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π")

async def contact_support(callback: types.CallbackQuery, state: FSMContext):
    """–ö–û–ù–¢–ê–ö–¢ –ó –ü–Ü–î–¢–†–ò–ú–ö–û–Æ"""
    try:
        await callback.answer()
        support_text = (
            f"üÜò <b>–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</b>\n\n"
            f"üìß <b>Email:</b> support@kaminskyi.ai\n"
            f"üí¨ <b>Telegram:</b> @KaminskyiSupport\n"
            f"üïê <b>–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏:</b> 9:00 - 21:00 (UTC+2)\n\n"
            f"üìù <b>–ü–µ—Ä–µ–¥ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ:</b>\n"
            f"‚Ä¢ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {callback.from_user.id}\n"
            f"‚Ä¢ –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏\n"
            f"‚Ä¢ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)\n\n"
            f"‚ö° <b>–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b> –¥–æ 2 –≥–æ–¥–∏–Ω"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ Telegram", url="https://t.me/KaminskyiSupport"))
        keyboard.add(types.InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç–∏ Email", url="mailto:support@kaminskyi.ai"))
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_payment"))
        
        await callback.message.answer(support_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ contact_support: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞")

async def view_receipt(callback: types.CallbackQuery, state: FSMContext):
    """–ü–ï–†–ï–ì–õ–Ø–î –ß–ï–ö–£"""
    try:
        await callback.answer()
        data = await state.get_data()
        
        if not data.get('payment_completed'):
            await callback.message.answer("‚ùå –ß–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –æ–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return
            
        from utils.payment_utils import format_payment_receipt
        receipt_text = format_payment_receipt(data)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ email", callback_data="email_receipt"))
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        await callback.message.answer(receipt_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ view_receipt: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–µ–∫—É")

def register_handlers_payment(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –û–ü–õ–ê–¢–ò"""
    dp.register_callback_query_handler(process_payment, lambda c: c.data and c.data == "process_payment")
    dp.register_callback_query_handler(payment_done, lambda c: c.data and c.data == "payment_done")
    dp.register_callback_query_handler(upload_another, lambda c: c.data and c.data == "upload_another")
    dp.register_callback_query_handler(payment_help, lambda c: c.data and c.data == "payment_help")
    dp.register_callback_query_handler(start_translation, lambda c: c.data and c.data == "start_translation")
    dp.register_callback_query_handler(payment_details, lambda c: c.data and c.data == "payment_details")
    dp.register_callback_query_handler(contact_support, lambda c: c.data and c.data == "contact_support")
    dp.register_callback_query_handler(view_receipt, lambda c: c.data and c.data == "view_receipt")