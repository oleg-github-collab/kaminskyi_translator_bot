from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TranslationStates
import logging
import os

logger = logging.getLogger(__name__)

async def start_translation(message: types.Message, state: FSMContext):
    """–ü–û–ß–ê–¢–û–ö –ü–ï–†–ï–ö–õ–ê–î–£"""
    try:
        logger.info(f"üîÑ –ü–û–ß–ê–¢–û–ö –ü–ï–†–ï–ö–õ–ê–î–£ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        user_data = await state.get_data()
        file_path = user_data.get('file_path')
        file_extension = user_data.get('file_extension')
        source_lang = user_data.get('source_language')
        target_lang = user_data.get('target_language')
        model = user_data.get('model', 'basic')
        
        if not file_path or not os.path.exists(file_path):
            await message.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await message.answer("üîÑ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ñ–∞–π–ª...")
        await message.answer("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ñ–∞–π–ª
        translated_path = file_path.replace(file_extension, f"_translated{file_extension}")
        
        # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –∫–æ–ø—ñ—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(translated_path, 'w', encoding='utf-8') as f:
            f.write(f"[–ü–ï–†–ï–ö–õ–ê–î] {content}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
        await message.answer_document(
            open(translated_path, 'rb'),
            caption="‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        )
        
        # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        try:
            os.remove(file_path)
            os.remove(translated_path)
        except:
            pass
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ
        await state.finish()
        
        # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîÑ –ù–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥", callback_data="continue_translate"))
        keyboard.add(types.InlineKeyboardButton("üëã –í–∏–π—Ç–∏", callback_data="exit"))
        
        await message.answer(
            "üéØ Kaminskyi AI Translator\n\n–•–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –ø–µ—Ä–µ–∫–ª–∞–¥?",
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ –ü–ï–†–ï–ö–õ–ê–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤ start_translation –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É")

def register_handlers_translate(dp):
    """–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLER'–Ü–í –ü–ï–†–ï–ö–õ–ê–î–£"""
    dp.register_message_handler(start_translation, state=TranslationStates.translating)