import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web
import asyncio
import config

# –Ü–º–ø–æ—Ä—Ç –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
from handlers import file, payment, language, start
from handlers.webhook import setup_webhooks

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Create directories
os.makedirs(config.TEMP_DIR, exist_ok=True)
os.makedirs(config.LOGS_DIR, exist_ok=True)

# Initialize bot
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# === –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ò–ô –ü–û–†–Ø–î–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –û–ë–†–û–ë–ù–ò–ö–Ü–í ===
# –í—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–æ –Ω–∞–π–º–µ–Ω—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö

# 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Ñ–∞–π–ª—ñ–≤ (–Ω–∞–π–±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω—É)
file.register_handlers_file(dp)
logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ–∞–π–ª—ñ–≤")

# 2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –æ–ø–ª–∞—Ç–∏
payment.register_handlers_payment(dp)
logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –æ–ø–ª–∞—Ç–∏")

# 3. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –º–æ–≤ (—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ callback_data + —Å—Ç–∞–Ω)
language.register_handlers_language(dp)
logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –º–æ–≤")

# 4. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å—Ç–∞—Ä—Ç—É (–≤–∫–ª—é—á–∞—î –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
# –í–ê–ñ–õ–ò–í–û: —Ü–µ–π –º–æ–¥—É–ª—å –º–∞—î –±—É—Ç–∏ –û–°–¢–ê–ù–ù–Ü–ú
start.register_handlers_start(dp)
logger.info("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å—Ç–∞—Ä—Ç—É")

# === DEBUG MODE (—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è) ===
# async def debug_callback(callback: types.CallbackQuery):
#     """–ù–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è callback –∑–∞–ø–∏—Ç—ñ–≤"""
#     logger.info(f"üîç Debug callback: data='{callback.data}' from user {callback.from_user.id}")
#     current_state = await dp.current_state(user=callback.from_user.id).get_state()
#     logger.info(f"üîç Current state: {current_state}")
#     await callback.answer(f"Debug: {callback.data}")

# # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è debug –æ–±—Ä–æ–±–Ω–∏–∫–∞ (–º–∞—î –±—É—Ç–∏ –û–°–¢–ê–ù–ù–Ü–ú)
# dp.register_callback_query_handler(debug_callback, lambda c: True, state="*")
# logger.info("üîç Debug mode enabled")

# Setup web server for webhooks
app = web.Application()
setup_webhooks(app)

async def on_startup(dp):
    """–î—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("üöÄ Starting Kaminskyi AI Translator Bot...")
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
    bot_info = await bot.get_me()
    logger.info(f"ü§ñ Bot: @{bot_info.username} (ID: {bot_info.id})")
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook (–¥–ª—è polling mode)
    await bot.delete_webhook()
    logger.info("üì° Webhook deleted, using long polling")
    
    # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω webhook mode, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ:
    # await bot.set_webhook(config.WEBHOOK_URL)
    # logger.info(f"üì° Webhook set to: {config.WEBHOOK_URL}")

async def on_shutdown(dp):
    """–î—ñ—ó –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞"""
    logger.info("üõë Shutting down Kaminskyi AI Translator Bot...")
    
    # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å—Ö–æ–≤–∏—â–∞
    await dp.storage.close()
    await dp.storage.wait_closed()
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook
    await bot.delete_webhook()
    
    # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
    await bot.session.close()
    
    logger.info("üëã Bot stopped successfully")

if __name__ == '__main__':
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if not config.BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN not found in config!")
        exit(1)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if hasattr(config, 'USE_WEBHOOK') and config.USE_WEBHOOK:
        # === WEBHOOK MODE ===
        logger.info("üåê Starting in WEBHOOK mode")
        
        # Start web server
        loop = asyncio.get_event_loop()
        
        runner = web.AppRunner(app)
        loop.run_until_complete(runner.setup())
        site = web.TCPSite(runner, '0.0.0.0', config.PORT)
        loop.run_until_complete(site.start())
        
        logger.info(f"üåê Web server started on port {config.PORT}")
        
        # Start bot with webhook
        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host='0.0.0.0',
            port=config.PORT
        )
    else:
        # === POLLING MODE (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏) ===
        logger.info("üîÑ Starting in POLLING mode")
        
        executor.start_polling(
            dp,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            allowed_updates=['message', 'callback_query']
        )